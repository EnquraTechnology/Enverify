// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name IDVerify
import AVFoundation
import AVKit
import Accelerate
import Alamofire
import CommonCrypto
import CoreImage
import CoreMedia
import CoreNFC
import CryptoKit
import CryptoTokenKit
import Foundation
@_exported import IDVerify
import MLKitFaceDetection
import MLKitTextRecognition
import MLKitVision
import MediaPlayer
import OpenSSL
import ReplayKit
import SocketIO
import Starscream
import Swift
import TensorFlowLite
import UIKit
import WebRTC
import _Concurrency
@objc public enum IDVerifyState : Swift.Int {
  case ID_VERIFY_START
  case ID_VERIFY_EXIT
  case ID_VERIFY_READY
  case ID_SELF_VERIFY
  case CALL_WAIT
  case CALL_START
  case ID_TYPE_CHECK
  case ID_TYPE_BACK_CHECK
  case ID_TYPE_CHECK_COMPLETED
  case ID_FAKE_CHECK
  case ID_FAKE_CHECK_COMPLETED
  case ID_FRONT
  case ID_FRONT_COMPLETED
  case ID_BACK
  case ID_BACK_COMPLETED
  case ID_VIEW
  case ID_VIEW_COMPLETED
  case ID_DOC_COMPLETED
  case NFC_VERIFY
  case NFC_VERIFY_COMPLETED
  case NFC_VIEW
  case NFC_VIEW_COMPLETED
  case FACE_DETECT
  case FACE_DETECT_COMPLETED
  case SMILE_DETECT
  case SMILE_DETECT_COMPLETED
  case EYE_CLOSE
  case EYE_CLOSE_COMPLETED
  case FACE_VIEW
  case FACE_VIEW_COMPLETED
  case FACE_COMPLETED
  case RETRY_ID_VERIFICATION
  case RETRY_FACE_VERIFICATION
  case RETRY_NFC_VERIFICATION
  case CALL_CHAT
  case HANGUP_LOCAL
  case HANGUP_REMOTE
  case FORCE_HANGUP
  case FAILURE
  case ID_FAKE_DETECTED
  case FACE_UP
  case FACE_UP_COMPLETED
  case FACE_LEFT
  case FACE_LEFT_COMPLETED
  case FACE_RIGHT
  case FACE_RIGHT_COMPLETED
  case EYE_CLOSE_INTERVAL
  case EYE_CLOSE_INTERVAL_COMPLETED
  case EYE_OPEN_INTERVAL
  case EYE_OPEN_INTERVAL_COMPLETED
  case CARD_FRONT_DETECT
  case CARD_FRONT_DETECT_COMPLETED
  case CARD_HOLO_DETECT
  case CARD_HOLO_DETECT_COMPLETED
  case CARD_BACK_DETECT
  case CARD_BACK_DETECT_COMPLETED
  case CARD_FAKE_HOLO_CHECK
  case CARD_FAKE_HOLO_CHECK_COMPLETED
  public var description: Swift.Int {
    get
  }
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class ScreenRecorder {
  public init()
  final public func startRecording(to outputURL: Foundation.URL? = nil, size: CoreGraphics.CGSize? = nil, saveToCameraRoll: Swift.Bool = false, errorHandler: @escaping (Swift.Error) -> Swift.Void)
  final public func stoprecording(errorHandler: @escaping (Swift.Error) -> Swift.Void)
  final public func appendVideoFiles(arrayVideos: [AVFoundation.AVAsset], completion: @escaping (Foundation.URL?, Swift.Error?) -> ())
  @objc deinit
}
public enum NFCAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: IDVerify.NFCAuthenticationStatus, b: IDVerify.NFCAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class NFCModel {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var personalNumber: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  public var nameOfHolder: Swift.String {
    get
  }
  public var lastnameOfHolder: Swift.String {
    get
  }
  public var placeOfBirth: Swift.String {
    get
  }
  public var fullDateOfBirth: Swift.String {
    get
  }
  public var documentSigningCertificate: IDVerify.X509Wrapper? {
    get
  }
  public var countrySigningCertificate: IDVerify.X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [IDVerify.DataGroupId] {
    get
  }
  public var dataGroupsRead: [IDVerify.DataGroupId : IDVerify.DataGroup] {
    get
  }
  public var dataGroupHashes: [IDVerify.DataGroupId : IDVerify.DataGroupHash] {
    get
  }
  public var cardAccess: IDVerify.CardAccess? {
    get
  }
  public var BACStatus: IDVerify.NFCAuthenticationStatus {
    get
  }
  public var PACEStatus: IDVerify.NFCAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: IDVerify.NFCAuthenticationStatus {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: IDVerify.DataGroupId, dataGroup: IDVerify.DataGroup)
  public func getDataGroup(_ id: IDVerify.DataGroupId) -> IDVerify.DataGroup?
  public func dumpPassportData(selectedDataGroups: [IDVerify.DataGroupId], includeActiveAuthenticationData: Swift.Bool = false) -> [Swift.String : Swift.String]
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [IDVerify.DataGroupId : [Swift.UInt8]]
  public func verifyPassport(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: IDVerify.TagReader)
  public func performBACAndGetSessionKeys(mrzKey: Swift.String, completed: @escaping (_ error: IDVerify.NFCPassportReaderError?) -> ())
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
public enum IDLayout : Swift.Int {
  case FrontPortrait
  case BackLandmark
  case FrontLayer
  case FrontExecute
  case FrontFail
  case FrontCallWait
  case FrontVideoChat
  case FrontSelfVerify
  case FrontCallChat
  case FrontCamera
  case NoOP
  case BackDetect
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup7 : IDVerify.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup14 : IDVerify.DataGroup {
  public var securityInfos: [IDVerify.SecurityInfo] {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IDVerify : ObjectiveC.NSObject {
  @objc public static func idVerifyStart(_ sender: Any) -> Swift.Bool
  @objc public static func idVerifyOCRStart(_ sender: Any) -> Swift.Bool
  @objc public static func idVerifyNFCStart(_ sender: Any) -> Swift.Bool
  @objc public static func checkPermissions() -> Swift.Bool
  @objc public static func videoCallStart(_ sender: Any) -> Swift.Bool
  @objc public static func selfServiceStart(_ sender: Any) -> Swift.Bool
  @objc public static func idFakeCheckStart()
  @objc public static func idFrontStart()
  @objc public static func idBackStart()
  @objc public static func idViewStart(vc: UIKit.UIViewController)
  @objc public static func idDocStore()
  @available(iOS 13.0, *)
  @objc public static func nfcStart() -> Swift.Int
  @objc public static func nfcViewStart(vc: UIKit.UIViewController)
  @objc public static func nfcStore()
  @objc public static func nfcLoad(data: [Swift.String : Swift.String])
  @objc public static func faceDetectStart()
  @objc public static func livenessDetectStart()
  @objc public static func idTypeCheckSet()
  @objc public static func idTypeBackCheckSet()
  @objc public static func faceDetectSet()
  @objc public static func faceBackDetectSet()
  @available(iOS 13.0, *)
  @objc public static func nfcVerifySet()
  @objc public static func chatSet()
  @objc public static func smileDetectStart()
  @objc public static func eyeCloseStart()
  @objc public static func eyeCloseIntervalStart()
  @objc public static func eyeOpenIntervalStart()
  @objc public static func faceUpStart()
  @objc public static func faceLeftStart()
  @objc public static func faceRightStart()
  @objc public static func faceCompleteStart()
  @objc public static func faceViewStart(vc: UIKit.UIViewController)
  @objc public static func faceStore()
  @objc public static func noConnectionAction()
  @objc public static func onRetryFace()
  @available(iOS 13.0, *)
  @objc public static func pauseForNFC()
  @objc public static func pauseForFace()
  @objc public static func videoCallRestart()
  @objc public static func selfServiceRestart()
  @objc public static func onConfirmFace()
  @objc public static func onRetryNFC()
  @objc public static func onConfirmNFC()
  @objc public static func idTypeCheckBackStart()
  @objc public static func idTypeCheckFrontStart()
  @objc public static func onRetryDoc()
  @objc public static func onConfirmDoc()
  @objc public static func idvSettings(domainName: Swift.String?, certificateName: Swift.String?, aiUsername: Swift.String?, aiPassword: Swift.String?, signalingServer: Swift.String?, stunServer: Swift.String?, turnServer: Swift.String?, turnUsername: Swift.String?, turnPassword: Swift.String?) -> Swift.Bool
  @objc public static func setMessage(message: Swift.String, index: Swift.Int) -> Swift.Bool
  @objc public static func stopSSStartVC(_ sender: Any)
  @objc public static func setNavigationController(navigator: UIKit.UINavigationController)
  @objc public static func getNavigationController() -> UIKit.UINavigationController?
  @objc public static func setOrientationLock(orientation: UIKit.UIInterfaceOrientationMask)
  @objc public static func setNFCBACData(docNo: Swift.String, birthday: Swift.String, expiryDate: Swift.String) -> Swift.Bool
  @objc public static func handleFail()
  @objc public static func handleCallFail()
  @objc public static func idVerifyRestart()
  @objc public static func startVideoChat()
  @objc public static func setSpeaker(soundStateOn: Swift.Bool)
  @objc public static func setSSStartButtons(buttonState: Swift.Bool)
  @objc public static func setVCStartButtons(buttonState: Swift.Bool)
  @objc public static func setICERelay(iceRelayState: Swift.Bool)
  @objc public static func setICEHost(iceHostState: Swift.Bool)
  @objc public static func setMediaServer(mediaServerState: Swift.Bool)
  @objc public static func isMediaServerSet() -> Swift.Bool
  @objc public static func setAgentFullScreen(agentFullScreenState: Swift.Bool)
  @objc public static func setHashCheck(hashCheck: Swift.Bool)
  @objc public static func onStartSelfService()
  @objc public static func onExitSelfService()
  @objc public static func onRetrySelfService()
  @objc public static func onStartCall()
  @objc public static func onExitCall()
  @objc public static func onExitCallWithoutPop()
  @objc public static func onHangupCall()
  @objc public static var iconStartButton: UIKit.UIButton
  @objc public static var iconExitButton: UIKit.UIButton
  @objc public static var iconRetryButton: UIKit.UIButton
  @objc public static var iconExitRetryButton: UIKit.UIButton
  @objc public static var iconHangupRetryButton: UIKit.UIButton
  @objc public static var iconHangupChatButton: UIKit.UIButton
  @objc public static var iconCallButton: UIKit.UIButton
  @objc public static var iconHangupButton: UIKit.UIButton
  @objc public static var iconRotateButton: UIKit.UIButton
  @objc public static var iconChatRotateButton: UIKit.UIButton
  @objc public static func setLivenessCalibration(value: Swift.Int)
  @objc public static func setSmilingCalibration(value: Swift.Float)
  @objc public static func setEyeCloseCalibration(value: Swift.Float)
  @objc public static func setEyeCloseTolerance(value: Swift.Int)
  @objc public static func setCallWaitTimeout(value: Swift.Int)
  @objc public static func setIceCheckingTimeout(value: Swift.Int)
  @objc public static func setFaceAngleCalibration(value: Swift.Int)
  @objc public static func setEyeCloseMaxTime(value: Swift.Int)
  @objc public static func setOCRMode(value: Swift.Int)
  @objc public static func setOCRCheckSize(value: Swift.Int)
  @objc public static func getNFCErrorCode() -> Swift.String
  @objc public static func createCallRecord()
  @objc public static func updateCallFinished()
  @objc public static func setViewerWidthRatio(local: Swift.Float, remote: Swift.Float)
  @objc public static func setViewerLocationRatio(x: Swift.Float, y: Swift.Float)
  @objc public static func getLocalView() -> UIKit.UIView
  @objc public static func getRemoteView() -> UIKit.UIView
  @objc public static func startSpeech(speechFile: Swift.String)
  @available(iOS 11.0, *)
  @objc public static func startAVRecording()
  @available(iOS 11.0, *)
  @objc public static func stopAVRecording()
  @objc public static func setVideoBitrate(rate: Swift.Int)
  @objc public static func getScreenRecordFilePath() -> Swift.String?
  @objc public static func appendVideoFiles(arrayVideos: [AVFoundation.AVAsset])
  @objc public static func idCardDetectSet()
  @objc public static func onRetryCardDetect()
  @objc public static func toggleFlash(state: Swift.Bool)
  @objc public static func startCardFrontDetect()
  @objc public static func startCardHoloDetect()
  @objc public static func startCardBackDetect()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup11 : IDVerify.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class VSession : ObjectiveC.NSObject {
  @objc public static var shared: IDVerify.VSession
  @objc public var userId: Swift.String
  @objc public var userName: Swift.String
  @objc public var userSurname: Swift.String
  @objc public func getRoomId() -> Swift.String
  @objc public func getDebugField() -> Swift.String
  public func getId() -> Swift.String
  @objc public func getVideoSize() -> CoreGraphics.CGSize
  @objc public func isFrontCameraOpen() -> Swift.Bool
  @objc public func isVideoCall() -> Swift.Bool
  @objc public func setDebugMode(mode: Swift.Bool)
  @objc public func isDebugMode() -> Swift.Bool
  @objc deinit
}
@available(iOS 13, *)
public let passportReader: IDVerify.NFCReader
public var navigationController: UIKit.UINavigationController?
public var orientationLock: UIKit.UIInterfaceOrientationMask
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension IDVerify.NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
extension IDVerify.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension IDVerify.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
public protocol CFace {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class CustomerFace : ObjectiveC.NSObject {
  @objc public static var shared: IDVerify.CustomerFace
  @objc public func getChipConfidence() -> Swift.Int
  @objc public func getIdConfidence() -> Swift.Int
  @objc public func getEyeConfidence() -> Swift.Int
  @objc public func getChipDistance() -> Swift.Float
  @objc public func getIdDistance() -> Swift.Float
  @objc public func getEyeDistance() -> Swift.Float
  @objc public func getSmilingConfidence() -> Swift.Float
  @objc public func getRightEyeCloseConfidence() -> Swift.Float
  @objc public func getLeftEyeCloseConfidence() -> Swift.Float
  @objc public func getRightEyeOpenConfidence() -> Swift.Float
  @objc public func getLeftEyeOpenConfidence() -> Swift.Float
  @objc public func getId() -> Swift.String
  @objc public func getFace() -> UIKit.UIImage
  @objc public func getEyeFace() -> UIKit.UIImage
  @objc public func getSelfiAntispoofing() -> Swift.Float
  @objc public func isHashSuccess() -> Swift.Bool
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  public func getChild(_ child: Swift.Int) -> IDVerify.ASN1Item?
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> IDVerify.ASN1Item
  public func test()
  @objc deinit
}
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: IDVerify.PACEMappingType, b: IDVerify.PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class PACEInfo : IDVerify.SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  public func getParameterId() -> Swift.Int?
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> IDVerify.PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> IDVerify.PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
public struct AppUtility {
  public static func lockOrientation(_ orientation: UIKit.UIInterfaceOrientationMask)
  public static func lockOrientation(_ orientation: UIKit.UIInterfaceOrientationMask, andRotateTo rotateOrientation: UIKit.UIInterfaceOrientation)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class NotImplementedDG : IDVerify.DataGroup {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup12 : IDVerify.DataGroup {
  public var issuingAuthority: Swift.String? {
    get
  }
  public var dateOfIssue: Swift.String? {
    get
  }
  public var otherPersonsDetails: Swift.String? {
    get
  }
  public var endorsementsOrObservations: Swift.String? {
    get
  }
  public var taxOrExitRequirements: Swift.String? {
    get
  }
  public var frontImage: [Swift.UInt8]? {
    get
  }
  public var rearImage: [Swift.UInt8]? {
    get
  }
  public var personalizationTime: Swift.String? {
    get
  }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(IDVerify.DataGroupId, Swift.Int)
  case error(IDVerify.NFCPassportReaderError)
  case successfulRead
}
@available(iOS 13, *)
extension IDVerify.NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup15 : IDVerify.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup {
  public var datagroupType: IDVerify.DataGroupId
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
@objc @available(iOS 13, *)
public class NFCReader : ObjectiveC.NSObject {
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  public init(logLevel: IDVerify.LogLevel = .info, masterListURL: Foundation.URL? = nil)
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  public func loadPassport(data: [Swift.String : Swift.String])
  public func readPassport(mrzKey: Swift.String, tags: [IDVerify.DataGroupId] = [], skipSecureElements: Swift.Bool = true, skipCA: Swift.Bool = false, skipPACE: Swift.Bool = false, customDisplayMessage: ((IDVerify.NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (IDVerify.NFCModel?, IDVerify.NFCPassportReaderError?) -> ())
  @objc deinit
}
@available(iOS 13, *)
extension IDVerify.NFCReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class CardAccess {
  public var securityInfos: [IDVerify.SecurityInfo] {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class CustomerCard : ObjectiveC.NSObject {
  @objc public static var shared: IDVerify.CustomerCard
  public var confidenceList: [Swift.String : IDVerify.Inference]
  public var confidenceScreenList: [Swift.String : IDVerify.Inference]
  public var bitmapList: [Swift.String : UIKit.UIImage]
  public var confidenceStatsList: [Swift.String : IDVerify.Stats]
  public func setHoloDetectionType(detectionType: IDVerify.HoloDetectionType)
  public func getHoloDetectionType() -> IDVerify.HoloDetectionType
  public func setDetectionThreshold(threshold: Swift.Float)
  public func getDetectionThreshold() -> Swift.Float
  @objc deinit
}
public struct Inference {
  public let confidence: Swift.Float
  public let className: Swift.String
}
public struct Stats {
  public var minConf: Swift.Float
  public var avgConf: Swift.Float
  public var detectCount: Swift.Int
}
public enum HoloDetectionType : Swift.String {
  case NO_HOLO
  case HOLO1_DETECT
  case HOLO2_DETECT
  case HOLO_ANY_DETECT
  case HOLO_ALL_DETECT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class ChipAuthenticationPublicKeyInfo : IDVerify.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose
  case debug
  case info
  case warning
  case txn
  case error
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [IDVerify.LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [IDVerify.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: IDVerify.LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: Swift.String...)
  public class func debug(_ msg: Swift.String...)
  public class func info(_ msg: Swift.String...)
  public class func warning(_ msg: Swift.String...)
  public class func error(_ msg: Swift.String...)
  public class func clearStoredLogs()
  public class func saveLogData()
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func mac(algoName: IDVerify.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationInfo : IDVerify.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  @available(iOS 13, macOS 10.15, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  @available(iOS 13, macOS 10.15, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class CustomerIdentityDoc : ObjectiveC.NSObject {
  @objc public static var shared: IDVerify.CustomerIdentityDoc
  @objc public func getIdType() -> Swift.String
  @objc public func getIdIssuer() -> Swift.String
  @objc public func getIdentityNo() -> Swift.String
  @objc public func getIdentityType() -> Swift.String
  @objc public func getDocumentNo() -> Swift.String
  @objc public func getName() -> Swift.String
  @objc public func getSurname() -> Swift.String
  @objc public func getGender() -> Swift.String
  @objc public func getBirthday() -> Swift.String
  @objc public func getNationality() -> Swift.String
  @objc public func getExpiryDate() -> Swift.String
  @objc public func getFace() -> UIKit.UIImage
  @objc public func getFrontpage() -> UIKit.UIImage
  @objc public func getBackpage() -> UIKit.UIImage
  @objc public func getHolopage() -> UIKit.UIImage
  @objc public func getCountry() -> Swift.String
  @objc public func getOptionalData1() -> Swift.String
  @objc public func getOptionalData2() -> Swift.String
  @objc public func setFace(faceImage: UIKit.UIImage)
  @objc deinit
}
public struct CustomerIdentityDocEncodable : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerIdentityDocData : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class UIUtilities {
  public static func addCircle(atPoint point: CoreGraphics.CGPoint, to view: UIKit.UIView, color: UIKit.UIColor, radius: CoreGraphics.CGFloat)
  public static func addLineSegment(fromPoint: CoreGraphics.CGPoint, toPoint: CoreGraphics.CGPoint, inView: UIKit.UIView, color: UIKit.UIColor, width: CoreGraphics.CGFloat)
  public static func addRectangle(_ rectangle: CoreGraphics.CGRect, to view: UIKit.UIView, color: UIKit.UIColor, point: CoreGraphics.CGPoint) -> (UIKit.UIView?, UIKit.UIView?)
  public static func addFaceRectangle(_ rectangle: CoreGraphics.CGRect, to view: UIKit.UIView, color: UIKit.UIColor, landmarks: [MLKitFaceDetection.FaceLandmark]) -> (UIKit.UIView?, UIKit.UIView?)
  public static func addShape(withPoints points: [Foundation.NSValue]?, to view: UIKit.UIView, color: UIKit.UIColor)
  public static func scaleImage(imageName: Swift.String, view: UIKit.UIView) -> UIKit.UIImageView
  @objc deinit
}
public enum Constants {
}
@_hasMissingDesignatedInitializers public class LogTxn {
  public static var logLevel: IDVerify.LogLevel
  public class func verbose(_ code: Swift.Int, _ msg: Swift.String? = nil)
  public class func debug(_ code: Swift.Int, _ msg: Swift.String? = nil)
  public class func info(_ code: Swift.Int, _ msg: Swift.String? = nil)
  public class func warning(_ code: Swift.Int, _ msg: Swift.String? = nil)
  public class func txn(_ code: Swift.Int, _ msg: Swift.String? = nil)
  public class func error(_ code: Swift.Int, _ msg: Swift.String? = nil)
  public class func log(_ logLevel: IDVerify.LogLevel, _ code: Swift.Int, _ msg: Swift.String)
  @objc deinit
}
@available(iOS 13, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: IDVerify.CertificateType, b: IDVerify.CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  public init?(with cert: Swift.OpaquePointer?)
  public func getItemsAsDict() -> [IDVerify.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
@objc public protocol IDVerifyDelegate {
  @objc func idVerifyReady()
  @objc func idSelfVerifyReady()
  @objc func callWait()
  @objc func callStart()
  @objc func idTypeCheck()
  @objc func idTypeBackCheck()
  @objc func idTypeCheckCompleted()
  @objc func idFakeCheck()
  @objc func idFakeCheckCompleted()
  @objc func idFront()
  @objc func idFrontCompleted()
  @objc func idBack()
  @objc func idBackCompleted()
  @objc func idDocCompleted()
  @objc func nfcVerify()
  @objc func nfcVerifyCompleted()
  @objc func nfcCompleted()
  @objc func faceDetect()
  @objc func faceDetectCompleted()
  @objc func smileDetect()
  @objc func smileDetectCompleted()
  @objc func eyeClose()
  @objc func eyeCloseDetected()
  @objc func faceCompleted()
  @objc func hangupLocal()
  @objc func hangupRemote()
  @objc func forceHangup()
  @objc func idFakeDetected()
  @objc func idDocStoreCompleted()
  @objc func nfcStoreCompleted()
  @objc func faceStoreCompleted()
  @objc func idVerifyExited()
  @objc func failure()
  @objc func timeoutFailure()
  @objc func idTextRecognitionTimeout()
  @objc func idCheckFailure()
  @objc func tokenFailure()
  @objc func connectionFailure()
  @objc func nfcFailure()
  @objc func faceLivenessCheckFailure()
  @objc func idRetry()
  @objc func nfcRetry()
  @objc func faceRetry()
  @objc func hostConnected()
  @objc func resolutionChanged()
  @objc func callConnectionFailure()
  @objc func agentRequest(eventData: Swift.String)
  @objc func faceUp()
  @objc func faceUpDetected()
  @objc func faceLeft()
  @objc func faceLeftDetected()
  @objc func faceRight()
  @objc func faceRightDetected()
  @objc func eyeCloseInterval()
  @objc func eyeCloseIntervalDetected()
  @objc func eyeOpenInterval()
  @objc func eyeOpenIntervalDetected()
  @objc func screenRecorderOnStart()
  @objc func screenRecorderOnComplete()
  @objc func screenRecorderOnError(eventData: Swift.String)
  @objc func screenRecorderOnAppend()
  @objc func cardFrontDetectStarted()
  @objc func cardFrontDetected()
  @objc func cardBackDetectStarted()
  @objc func cardBackDetected()
  @objc func cardHoloDetectStarted()
  @objc func cardHoloDetected()
}
@objc public protocol IDVerifyOCRDelegate {
  @objc func idSelfVerifyReady()
  @objc func idFront()
  @objc func idFrontCompleted()
  @objc func idBack()
  @objc func idBackCompleted()
  @objc func idDocCompleted()
  @objc func idDocStoreCompleted()
  @objc func idVerifyExited()
  @objc func failure()
  @objc func timeoutFailure()
  @objc func idTextRecognitionTimeout()
  @objc func idCheckFailure()
  @objc func idRetry()
  @objc func cardFrontDetectStarted()
  @objc func cardFrontDetected()
  @objc func cardBackDetectStarted()
  @objc func cardBackDetected()
  @objc func cardHoloDetectStarted()
  @objc func cardHoloDetected()
}
@objc public protocol IDVerifyNFCDelegate {
  @objc func idSelfVerifyReady()
  @objc func nfcVerify()
  @objc func nfcVerifyCompleted()
  @objc func nfcCompleted()
  @objc func nfcRetry()
  @objc func nfcFailure()
}
@_hasMissingDesignatedInitializers public class APIUtils {
  public static func getToken()
  public static func createSession()
  public static func getVSession()
  public static func getCallRecords()
  public static func updateVSession(docId: Swift.String?, chipId: Swift.String?, faceId: Swift.String?)
  public static func createCustomerIDDoc() throws
  public static func createNFCRecord() throws
  public static func createFaceRecord() throws
  public static func createFaces() throws
  public static func createCallRecord()
  public static func updateCallRecord()
  public static func updateCallStarted()
  public static func updateCallFinished()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Screen {
  public static func width() -> CoreGraphics.CGFloat
  public static func height() -> CoreGraphics.CGFloat
  public static func imageWidth() -> CoreGraphics.CGFloat
  public static func imageHeight() -> CoreGraphics.CGFloat
  public static func normalizeWidth() -> CoreGraphics.CGFloat
  public static func normalizeHeight() -> CoreGraphics.CGFloat
  public static func viewBoxRemoteWidth() -> CoreGraphics.CGFloat
  public static func viewBoxRemoteHeight() -> CoreGraphics.CGFloat
  public static func viewBoxLocalWidth() -> CoreGraphics.CGFloat
  public static func viewBoxLocalHeight() -> CoreGraphics.CGFloat
  public static func viewBoxX() -> CoreGraphics.CGFloat
  public static func viewBoxY() -> CoreGraphics.CGFloat
  public static func screenAspectRatio() -> CoreGraphics.CGFloat
  public static func previewAspectRatio() -> CoreGraphics.CGFloat
  public static func previewWidth() -> CoreGraphics.CGFloat
  public static func previewHeight() -> CoreGraphics.CGFloat
  public static func previewPixelRatio() -> CoreGraphics.CGFloat
  public static func previewAlign() -> CoreGraphics.CGFloat
  public static func pixelRatio() -> CoreGraphics.CGFloat
  public static func templateSW() -> CoreGraphics.CGFloat
  public static func templateSH() -> CoreGraphics.CGFloat
  public static func templateStart() -> CoreGraphics.CGFloat
  public static func offsetX() -> CoreGraphics.CGFloat
  public static func offsetY() -> CoreGraphics.CGFloat
  public static func convertX(x: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public static func convertY(y: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
}
public enum IDVerifyEvent : Swift.Int {
  case None
  case TimeoutError
  case IDTextRecognitionTimeout
  case NoConnectionError
  case CallConnectionError
  case IDCheckFail
  case NFCError
  case NFCNotAvailable
  case FaceLivenessCheckFail
  case ServerError
  case NetworkError
  case TokenError
  case IdDocStored
  case ChipStored
  case FaceStored
  case IdDocRetry
  case NFCRetry
  case FaceRetry
  case HostConnected
  case ResolutionChanged
  case AgentRequest
  case ScreenRecorderStarted
  case ScreenRecorderCompleted
  case ScreenRecorderError
  case ScreenRecorderOnAppend
  public var description: Swift.Int {
    get
  }
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class PACEHandler {
  public init(cardAccess: IDVerify.CardAccess, tagReader: IDVerify.TagReader) throws
  public func doPACE(mrzKey: Swift.String, completed: @escaping (Swift.Bool) -> ())
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup2 : IDVerify.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> IDVerify.DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [IDVerify.DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [IDVerify.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: IDVerify.SecureMessagingSupportedAlgorithms, b: IDVerify.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: IDVerify.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
@available(iOS 13, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup1 : IDVerify.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class CustomerChip : ObjectiveC.NSObject {
  @objc public static var shared: IDVerify.CustomerChip
  @objc public func getID() -> Swift.String
  @objc public func getIdentityNo() -> Swift.String
  @objc public func getIdentityType() -> Swift.String
  @objc public func getDocumentNo() -> Swift.String
  @objc public func getName() -> Swift.String
  @objc public func getSurname() -> Swift.String
  @objc public func getGender() -> Swift.String
  @objc public func getBirthday() -> Swift.String
  @objc public func getNationality() -> Swift.String
  @objc public func getExpiryDate() -> Swift.String
  @objc public func getFace() -> UIKit.UIImage
  @objc public func isChipAuthSucceeded() -> Swift.AnyObject?
  @objc public func isPassiveAuthSucceeded() -> Swift.AnyObject?
  @objc public func isActiveAuthSucceed() -> Swift.AnyObject?
  @objc public func isDataValidated() -> Swift.AnyObject?
  @objc public func getPublicKey() -> Swift.String
  @objc public func getChallenge() -> Swift.String
  @objc public func getResponse() -> Swift.String
  @objc public func getAuthError() -> Swift.String
  @objc public func getNameOfHolder() -> Swift.String
  @objc public func getSurnameOfHolder() -> Swift.String
  @objc public func getPlaceOfBirth() -> Swift.String
  @objc public func getFullDateOfBirth() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class COM : IDVerify.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
extension IDVerify.IDVerifyState : Swift.Equatable {}
extension IDVerify.IDVerifyState : Swift.Hashable {}
extension IDVerify.IDVerifyState : Swift.RawRepresentable {}
extension IDVerify.NFCAuthenticationStatus : Swift.Equatable {}
extension IDVerify.NFCAuthenticationStatus : Swift.Hashable {}
extension IDVerify.IDLayout : Swift.Equatable {}
extension IDVerify.IDLayout : Swift.Hashable {}
extension IDVerify.IDLayout : Swift.RawRepresentable {}
extension IDVerify.PACEMappingType : Swift.Equatable {}
extension IDVerify.PACEMappingType : Swift.Hashable {}
extension IDVerify.HoloDetectionType : Swift.Equatable {}
extension IDVerify.HoloDetectionType : Swift.Hashable {}
extension IDVerify.HoloDetectionType : Swift.RawRepresentable {}
extension IDVerify.LogLevel : Swift.Equatable {}
extension IDVerify.LogLevel : Swift.Hashable {}
extension IDVerify.LogLevel : Swift.RawRepresentable {}
@available(iOS 13, *)
extension IDVerify.CertificateType : Swift.Equatable {}
@available(iOS 13, *)
extension IDVerify.CertificateType : Swift.Hashable {}
@available(iOS 13, *)
extension IDVerify.CertificateItem : Swift.Equatable {}
@available(iOS 13, *)
extension IDVerify.CertificateItem : Swift.Hashable {}
@available(iOS 13, *)
extension IDVerify.CertificateItem : Swift.RawRepresentable {}
extension IDVerify.IDVerifyEvent : Swift.Equatable {}
extension IDVerify.IDVerifyEvent : Swift.Hashable {}
extension IDVerify.IDVerifyEvent : Swift.RawRepresentable {}
@available(iOS 13, *)
extension IDVerify.DataGroupId : Swift.Equatable {}
@available(iOS 13, *)
extension IDVerify.DataGroupId : Swift.Hashable {}
@available(iOS 13, *)
extension IDVerify.DataGroupId : Swift.RawRepresentable {}
extension IDVerify.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension IDVerify.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
@available(iOS 13, *)
extension IDVerify.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, *)
extension IDVerify.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, *)
extension IDVerify.DocTypeEnum : Swift.RawRepresentable {}
