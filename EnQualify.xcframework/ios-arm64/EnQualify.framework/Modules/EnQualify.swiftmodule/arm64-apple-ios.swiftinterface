// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios10.3 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name EnQualify
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Alamofire
import CallKit
import CommonCrypto
import CoreNFC
import CoreTelephony
import CryptoKit
import Foundation
import IDVerification
import Photos
import ReplayKit
import Security
import Swift
import SwiftyJSON
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
public struct SignedMessageVerifyAppointmentSaveMobileRequest : Swift.Codable {
  public var message: EnQualify.VerifyAppointmentSaveMobileRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.VerifyAppointmentSaveMobileRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthAuthenticationValidationInfo : Swift.Codable {
  public var phoneLastFour: Swift.String?
  public var phoneMissingMask: Swift.String?
  public init(phoneLastFour: Swift.String? = nil, phoneMissingMask: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case phoneLastFour
    case phoneMissingMask
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallSessionRoomResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var status: EnQualify.VerifyCallSessionStatusTypeEnum?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, status: EnQualify.VerifyCallSessionStatusTypeEnum? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case status
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallIDChipAddResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var status: EnQualify.VerifyCallSessionStatusTypeEnum?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, status: EnQualify.VerifyCallSessionStatusTypeEnum? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case status
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SignedMessageVerifyDocumentSignGetMobileRequest : Swift.Codable {
  public var message: EnQualify.VerifyDocumentSignGetMobileRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.VerifyDocumentSignGetMobileRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SignedMessageVerifyDocumentSignSetMobileRequest : Swift.Codable {
  public var message: EnQualify.VerifyDocumentSignSetMobileRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.VerifyDocumentSignSetMobileRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PartiesAuthTypeEnum : Swift.String, Swift.Codable {
  case _none
  case _default
  case ldap
  case ad
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SignedMessageVerifyAvailableAppointmentListRequest : Swift.Codable {
  public var message: EnQualify.VerifyAvailableAppointmentListRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.VerifyAvailableAppointmentListRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DocumentsContent : Swift.Codable {
  public var documentUId: Foundation.UUID?
  public var name: Swift.String?
  public var version: Swift.String?
  public var length: Swift.Int64?
  public var storage: Swift.String?
  public var path: Swift.String?
  public var text: Swift.String?
  public var binary: Swift.String?
  public var state: EnQualify.EntityStateTypeEnum?
  public var _id: Swift.Int64
  public var uId: Foundation.UUID
  public var createDate: Foundation.Date?
  public var modifyDate: Foundation.Date?
  public init(documentUId: Foundation.UUID? = nil, name: Swift.String? = nil, version: Swift.String? = nil, length: Swift.Int64? = nil, storage: Swift.String? = nil, path: Swift.String? = nil, text: Swift.String? = nil, binary: Swift.String? = nil, state: EnQualify.EntityStateTypeEnum? = nil, _id: Swift.Int64, uId: Foundation.UUID, createDate: Foundation.Date? = nil, modifyDate: Foundation.Date? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case documentUId
    case name
    case version
    case length
    case storage
    case path
    case text
    case binary
    case state
    case _id
    case uId
    case createDate
    case modifyDate
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallFaceAddResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var status: EnQualify.VerifyCallSessionStatusTypeEnum?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, status: EnQualify.VerifyCallSessionStatusTypeEnum? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case status
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallFaceAddRequest : Swift.Codable {
  public var faceDocumentContentHash: Swift.String?
  public var _id: Swift.Int64?
  public var uId: Foundation.UUID?
  public var code: Swift.String?
  public var data: EnQualify.VerifyCallFaceModel
  public init(faceDocumentContentHash: Swift.String? = nil, _id: Swift.Int64? = nil, uId: Foundation.UUID? = nil, code: Swift.String? = nil, data: EnQualify.VerifyCallFaceModel)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case faceDocumentContentHash
    case _id
    case uId
    case code
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SignedMessageVerifyCallIDCheckAddRequest : Swift.Codable {
  public var message: EnQualify.VerifyCallIDCheckAddRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.VerifyCallIDCheckAddRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public class EnVerifyCallAddressRegistrationModel : ObjectiveC.NSObject {
  @objc public var addressType: Swift.String?
  @objc public var district: Swift.String?
  @objc public var districtCode: Swift.String?
  @objc public var street: Swift.String?
  @objc public var streetCode: Swift.String?
  @objc public var villageCode: Swift.String?
  @objc public var addressDetail: Swift.String?
  @objc public var townCode: Swift.String?
  @objc public var town: Swift.String?
  @objc public var city: Swift.String?
  @objc public var cityCode: Swift.String?
  @objc public var country: Swift.String?
  @objc public var countryCode: Swift.String?
  @objc public init(addressType: Swift.String? = nil, district: Swift.String? = nil, districtCode: Swift.String? = nil, street: Swift.String? = nil, streetCode: Swift.String? = nil, villageCode: Swift.String? = nil, addressDetail: Swift.String? = nil, townCode: Swift.String? = nil, town: Swift.String? = nil, city: Swift.String? = nil, cityCode: Swift.String? = nil, country: Swift.String? = nil, countryCode: Swift.String? = nil)
  @objc deinit
}
@objc public class EnVerifyCallIDRegistrationModel : ObjectiveC.NSObject {
  @objc public var fatherName: Swift.String?
  @objc public var motherName: Swift.String?
  @objc public var birthPlace: Swift.String?
  @objc public var registrationPlaceFamilyRow: Swift.String?
  @objc public var registrationPlacePersonalRow: Swift.String?
  @objc public var identificationCardSerial: Swift.String?
  @objc public var identificationCardRecord: Swift.String?
  @objc public var identityType: Swift.String?
  @objc public var identityNo: Swift.String?
  @objc public var documentNo: Swift.String?
  @objc public var name: Swift.String?
  @objc public var surname: Swift.String?
  @objc public var gender: Swift.String?
  @objc public var birthDate: Swift.String?
  @objc public var nationality: Swift.String?
  @objc public var issuedBy: Swift.String?
  @objc public var issuedDate: Swift.String?
  @objc public var expireDate: Swift.String?
  @objc public init(fatherName: Swift.String? = nil, motherName: Swift.String? = nil, birthPlace: Swift.String? = nil, registrationPlaceFamilyRow: Swift.String? = nil, registrationPlacePersonalRow: Swift.String? = nil, identificationCardSerial: Swift.String? = nil, identificationCardRecord: Swift.String? = nil, identityType: Swift.String? = nil, identityNo: Swift.String? = nil, documentNo: Swift.String? = nil, name: Swift.String? = nil, surname: Swift.String? = nil, gender: Swift.String? = nil, birthDate: Swift.String? = nil, nationality: Swift.String? = nil, issuedBy: Swift.String? = nil, issuedDate: Swift.String? = nil, expireDate: Swift.String? = nil)
  @objc deinit
}
@objc public class EnverifyVerifyCallResult : ObjectiveC.NSObject {
  @objc public var dateTime: Foundation.Date?
  @objc public var userRole: Swift.String?
  @objc public var result: Swift.String?
  @objc public var reference: Swift.String?
  @objc public var _description: Swift.String?
  @objc public var userUId: Foundation.UUID?
  @objc public init(dateTime: Foundation.Date? = nil, userRole: Swift.String? = nil, result: Swift.String? = nil, reference: Swift.String?, _description: Swift.String? = nil, userUId: Foundation.UUID? = nil)
  @objc deinit
}
@objc public class EnverifyVerifyAvailableAppointmentResult : ObjectiveC.NSObject {
  @objc public var date: Foundation.Date?
  @objc public var startTime: Swift.String?
  @objc public var endTime: Swift.String?
  @objc public init(date: Foundation.Date? = nil, startTime: Swift.String? = nil, endTime: Swift.String? = nil)
  @objc deinit
}
@objc public class EnverifyVerifyCancelAppointmentResult : ObjectiveC.NSObject {
  @objc public var isSuccessful: Swift.Bool
  @objc public var result: EnQualify.EnverifyVerifyResultInfo?
  @objc public var warning: EnQualify.EnverifyVerifyResultInfo?
  @objc public var referenceId: Foundation.UUID?
  @objc public init(isSuccessful: Swift.Bool, result: EnQualify.EnverifyVerifyResultInfo? = nil, warning: EnQualify.EnverifyVerifyResultInfo? = nil, referenceId: Foundation.UUID? = nil)
  @objc deinit
}
@objc public class EnverifyVerifyAppointmentSaveMobileModel : ObjectiveC.NSObject {
  @objc public var uId: Foundation.UUID?
  @objc public var callType: Swift.String?
  @objc public var date: Foundation.Date?
  @objc public var startTime: Swift.String?
  @objc public var identityType: Swift.String?
  @objc public var identityNo: Swift.String?
  @objc public var name: Swift.String?
  @objc public var surname: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var email: Swift.String?
  public init(uId: Foundation.UUID?, callType: Swift.String? = nil, date: Foundation.Date? = nil, startTime: Swift.String? = nil, identityType: Swift.String? = nil, identityNo: Swift.String? = nil, name: Swift.String? = nil, surname: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case uId
    case callType
    case date
    case startTime
    case identityType
    case identityNo
    case name
    case surname
    case phone
    case email
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@objc public class EnverifyVerifySaveMobileAppointmentResult : ObjectiveC.NSObject {
  @objc public var isSuccessful: Swift.Bool
  @objc public var result: EnQualify.EnverifyVerifyResultInfo?
  @objc public var warning: EnQualify.EnverifyVerifyResultInfo?
  @objc public var referenceId: Foundation.UUID?
  @objc public init(isSuccessful: Swift.Bool, result: EnQualify.EnverifyVerifyResultInfo? = nil, warning: EnQualify.EnverifyVerifyResultInfo? = nil, referenceId: Foundation.UUID? = nil)
  @objc deinit
}
@objc public class EnverifyVerifyResultInfo : ObjectiveC.NSObject {
  @objc public var code: Swift.String?
  @objc public var title: Swift.String?
  @objc public var message: Swift.String?
  @objc public var logMessage: Swift.String?
  @objc public var values: [Swift.String : Swift.String]?
  @objc public var info: Swift.String?
  @objc public init(code: Swift.String? = nil, title: Swift.String? = nil, message: Swift.String? = nil, logMessage: Swift.String? = nil, values: [Swift.String : Swift.String]? = nil, info: Swift.String? = nil)
  @objc deinit
}
@objc public class EnverifyVerifyAppointmentResult : ObjectiveC.NSObject {
  @objc public var uId: Foundation.UUID?
  @objc public var callType: Swift.String?
  @objc public var identityType: Swift.String?
  @objc public var identityNo: Swift.String?
  @objc public var name: Swift.String?
  @objc public var surname: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var email: Swift.String?
  @objc public var startDate: Foundation.Date?
  @objc public var endDate: Foundation.Date?
  @objc public init(uId: Foundation.UUID? = nil, callType: Swift.String? = nil, identityType: Swift.String? = nil, identityNo: Swift.String? = nil, name: Swift.String? = nil, surname: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil, startDate: Foundation.Date? = nil, endDate: Foundation.Date? = nil)
  @objc deinit
}
@objc public class EnverifyVerifyCallTypeResult : ObjectiveC.NSObject {
  @objc public var code: Swift.String?
  @objc public var name: Swift.String?
  @objc public init(code: Swift.String? = nil, name: Swift.String? = nil)
  @objc deinit
}
public struct CoreSpeedTestDownloadRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthTokenRequest : Swift.Codable {
  public var auth: EnQualify.PartiesAuthTypeEnum?
  public var domainType: EnQualify.PartiesPartyRoleTypeEnum?
  public var domain: Swift.String?
  public var userName: Swift.String?
  public var password: Swift.String?
  public var client: EnQualify.AuthClientInfo?
  public init(auth: EnQualify.PartiesAuthTypeEnum? = nil, domainType: EnQualify.PartiesPartyRoleTypeEnum? = nil, domain: Swift.String? = nil, userName: Swift.String? = nil, password: Swift.String? = nil, client: EnQualify.AuthClientInfo? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case auth
    case domainType
    case domain
    case userName
    case password
    case client
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPadAir4, iPad5, iPad6, iPad7, iPad8, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro2_11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12Mini, iPhone12, iPhone12Pro, iPhone12ProMax, iPhone13Mini, iPhone13, iPhone13Pro, iPhone13ProMax, iPhone14, iPhone14Plus, iPhone14Pro, iPhone14ProMax, AppleWatch1, AppleWatchS1, AppleWatchS2, AppleWatchS3, AppleWatchS4, AppleWatchS5, AppleWatchSE, AppleWatchS6, AppleTV1, AppleTV2, AppleTV3, AppleTV4, AppleTV_4K, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var typeDevice: EnQualify.Model {
    get
  }
}
public struct VerifyCallIDDocAddResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var status: EnQualify.VerifyCallSessionStatusTypeEnum?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, status: EnQualify.VerifyCallSessionStatusTypeEnum? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case status
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SignedMessageVerifyAppointmentListMobileRequest : Swift.Codable {
  public var message: EnQualify.VerifyAppointmentListMobileRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.VerifyAppointmentListMobileRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyAppointmentCancelResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SignedMessageVerifyCallSessionAddRequest : Swift.Codable {
  public var message: EnQualify.VerifyCallSessionAddRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.VerifyCallSessionAddRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyAppointmentMobileModel : Swift.Codable {
  public var uId: Foundation.UUID?
  public var callType: Swift.String?
  public var callTypeValue: Swift.String?
  public var identityType: Swift.String?
  public var identityNo: Swift.String?
  public var name: Swift.String?
  public var surname: Swift.String?
  public var phone: Swift.String?
  public var email: Swift.String?
  public var startDate: Foundation.Date?
  public var endDate: Foundation.Date?
  public init(uId: Foundation.UUID? = nil, callType: Swift.String? = nil, callTypeValue: Swift.String? = nil, identityType: Swift.String? = nil, identityNo: Swift.String? = nil, name: Swift.String? = nil, surname: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil, startDate: Foundation.Date? = nil, endDate: Foundation.Date? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case uId
    case callType
    case callTypeValue
    case identityType
    case identityNo
    case name
    case surname
    case phone
    case email
    case startDate
    case endDate
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class Auth2API {
  open class func apiAuth2RevokePost(body: EnQualify.SignedMessageBaseRequest? = nil, completion: @escaping ((_ data: EnQualify.AuthRevokeTokenResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiAuth2RevokePostWithRequestBuilder(body: EnQualify.SignedMessageBaseRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.AuthRevokeTokenResponse>
  open class func apiAuth2TokenPost(body: EnQualify.SignedMessageAuthTokenRequest? = nil, completion: @escaping ((_ data: EnQualify.AuthTokenResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiAuth2TokenPostWithRequestBuilder(body: EnQualify.SignedMessageAuthTokenRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.AuthTokenResponse>
  @objc deinit
}
@_hasMissingDesignatedInitializers open class VerifyAPI {
  open class func apiVerifyAppointmentAvailableListPost(body: EnQualify.SignedMessageVerifyAvailableAppointmentListRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyAvailableAppointmentListResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyAppointmentAvailableListPostWithRequestBuilder(body: EnQualify.SignedMessageVerifyAvailableAppointmentListRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyAvailableAppointmentListResponse>
  open class func apiVerifyAppointmentCancelPost(body: EnQualify.SignedMessageVerifyAppointmentCancelRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyAppointmentCancelResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyAppointmentCancelPostWithRequestBuilder(body: EnQualify.SignedMessageVerifyAppointmentCancelRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyAppointmentCancelResponse>
  open class func apiVerifyAppointmentListPost(body: EnQualify.SignedMessageVerifyAppointmentListMobileRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyAppointmentListMobileResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyAppointmentListPostWithRequestBuilder(body: EnQualify.SignedMessageVerifyAppointmentListMobileRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyAppointmentListMobileResponse>
  open class func apiVerifyAppointmentSavePost(body: EnQualify.SignedMessageVerifyAppointmentSaveMobileRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyAppointmentAddResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyAppointmentSavePostWithRequestBuilder(body: EnQualify.SignedMessageVerifyAppointmentSaveMobileRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyAppointmentAddResponse>
  open class func apiVerifyCallTypeListPost(body: EnQualify.SignedMessageBaseRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyCallTypeNameListResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyCallTypeListPostWithRequestBuilder(body: EnQualify.SignedMessageBaseRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyCallTypeNameListResponse>
  open class func apiVerifyFaceAddPost(body: EnQualify.VerifySignedMessageCallFaceAddRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyCallFaceAddResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyFaceAddPostWithRequestBuilder(body: EnQualify.VerifySignedMessageCallFaceAddRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyCallFaceAddResponse>
  open class func apiVerifyIDBlockGetPost(body: EnQualify.SignedMessageVerifyCallIDBlockGetRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyCallIDBlockGetResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyIDBlockGetPostWithRequestBuilder(body: EnQualify.SignedMessageVerifyCallIDBlockGetRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyCallIDBlockGetResponse>
  open class func apiVerifyIDCheckAddPost(body: EnQualify.SignedMessageVerifyCallIDCheckAddRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyCallIDCheckAddResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyIDCheckAddPostWithRequestBuilder(body: EnQualify.SignedMessageVerifyCallIDCheckAddRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyCallIDCheckAddResponse>
  open class func apiVerifyIDChipAddPost(body: EnQualify.VerifySignedMessageCallIDChipAddRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyCallIDChipAddResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyIDChipAddPostWithRequestBuilder(body: EnQualify.VerifySignedMessageCallIDChipAddRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyCallIDChipAddResponse>
  open class func apiVerifyIDDocAddPost(body: EnQualify.VerifySignedMessageCallIDDocAddRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyCallIDDocAddResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyIDDocAddPostWithRequestBuilder(body: EnQualify.VerifySignedMessageCallIDDocAddRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyCallIDDocAddResponse>
  open class func apiVerifyIntegrationAddPost(body: EnQualify.SignedMessageVerifyCallIntegrationAddRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyCallIntegrationAddResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyIntegrationAddPostWithRequestBuilder(body: EnQualify.SignedMessageVerifyCallIntegrationAddRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyCallIntegrationAddResponse>
  open class func apiVerifyLogAddPost(body: EnQualify.SignedMessageVerifyCallLogAddRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyCallLogAddResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyLogAddPostWithRequestBuilder(body: EnQualify.SignedMessageVerifyCallLogAddRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyCallLogAddResponse>
  open class func apiVerifyResultGetPost(body: EnQualify.SignedMessageBaseRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyCallResultResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyResultGetPostWithRequestBuilder(body: EnQualify.SignedMessageBaseRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyCallResultResponse>
  open class func apiVerifySessionAddPost(body: EnQualify.SignedMessageVerifyCallSessionAddRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyCallSessionAddResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifySessionAddPostWithRequestBuilder(body: EnQualify.SignedMessageVerifyCallSessionAddRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyCallSessionAddResponse>
  open class func apiVerifySessionClosePost(body: EnQualify.SignedMessageVerifyCallSessionCloseRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyCallSessionCloseResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifySessionClosePostWithRequestBuilder(body: EnQualify.SignedMessageVerifyCallSessionCloseRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyCallSessionCloseResponse>
  open class func apiVerifySessionRoomPost(body: EnQualify.SignedMessageVerifyCallSessionRoomRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyCallSessionRoomResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifySessionRoomPostWithRequestBuilder(body: EnQualify.SignedMessageVerifyCallSessionRoomRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyCallSessionRoomResponse>
  open class func apiVerifySettingGetPost(body: EnQualify.SignedMessageBaseRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyMobileParameterGetResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifySettingGetPostWithRequestBuilder(body: EnQualify.SignedMessageBaseRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyMobileParameterGetResponse>
  open class func apiVerifySigningGetPost(body: EnQualify.SignedMessageVerifyDocumentSignGetMobileRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyDocumentSignGetMobileResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifySigningGetPostWithRequestBuilder(body: EnQualify.SignedMessageVerifyDocumentSignGetMobileRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyDocumentSignGetMobileResponse>
  open class func apiVerifySigningSetPost(body: EnQualify.SignedMessageVerifyDocumentSignSetMobileRequest? = nil, completion: @escaping ((_ data: EnQualify.VerifyDocumentSignSetMobileResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifySigningSetPostWithRequestBuilder(body: EnQualify.SignedMessageVerifyDocumentSignSetMobileRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.VerifyDocumentSignSetMobileResponse>
  open class func apiVerifyVideoAddPost(timeout: Swift.Int, body: EnQualify.VerifySignedMessageCallVideoMobileAddRequest? = nil, completion: @escaping ((_ data: EnQualify.BaseResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiVerifyVideoAddPostWithRequestBuilder(timeout: Swift.Int, body: EnQualify.VerifySignedMessageCallVideoMobileAddRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.BaseResponse>
  @objc deinit
}
public struct CoreSpeedTestDownloadResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var data: Swift.String?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, data: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallSessionCloseResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var status: EnQualify.VerifyCallSessionStatusTypeEnum?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, status: EnQualify.VerifyCallSessionStatusTypeEnum? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case status
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallIDBlockGetResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var valid: Swift.Bool?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, valid: Swift.Bool? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case valid
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BaseResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CoreStatusResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var dateTime: Foundation.Date?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, dateTime: Foundation.Date? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case dateTime
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class EnVSession : ObjectiveC.NSObject {
  @objc public static func checkFrontCameraOpen()
  @objc public static func isFrontCameraOpen() -> Swift.Bool
  @objc public static func setDebugMode(_ mode: Swift.Bool)
  @objc public static func setUserId(_ value: Swift.String)
  @objc public static func setUserName(_ value: Swift.String)
  @objc public static func setUserSurname(_ value: Swift.String)
  @objc public static func getUserId() -> Swift.String
  @objc public static func getUserName() -> Swift.String
  @objc public static func getUserSurname() -> Swift.String
  @objc public static func getRoomId() -> Swift.String
  @objc public static func getId() -> Swift.String
  @objc public static func getVideoSize() -> CoreFoundation.CGSize
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class EnVerify : ObjectiveC.NSObject, UIKit.UIApplicationDelegate {
  @_Concurrency.MainActor(unsafe) public static var releaseNumber: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public static var screenRecordAssets: [AVFoundation.AVAsset]
  @objc @_Concurrency.MainActor(unsafe) public static var screenRecordingParts: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public static var screenRecordingData: EnQualify.EnverifyScreenRecordingData
  @objc @_Concurrency.MainActor(unsafe) public static var timerLiveLog: Foundation.Timer?
  @objc @_Concurrency.MainActor(unsafe) public static var enverify_accessToken: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public static var callType: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public static var handicapped: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public static var identityType: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public static var identityNo: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public static var canAutoClose: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public static var _continue: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public static var agentDummyImage: UIKit.UIImage?
  @objc @_Concurrency.MainActor(unsafe) public static var agentDummyVideoPlayer: AVFoundation.AVPlayer?
  @objc @_Concurrency.MainActor(unsafe) public static var isAgentDummyShown: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public static var isCallAnswered: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public static var isCallCancelled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public static func incomingCallObserver(callChanged call: CallKit.CXCall)
  @objc @_Concurrency.MainActor(unsafe) public static func integrationAdd(type: Swift.String, reference: Swift.String, callType: Swift.String?, phone: Swift.String?, email: Swift.String?, data: Swift.String, addressRegistration: EnQualify.EnVerifyCallAddressRegistrationModel?, iDRegistration: EnQualify.EnVerifyCallIDRegistrationModel?)
  @objc @_Concurrency.MainActor(unsafe) public static func getAuthToken(_ userNameForToken: Swift.String? = nil, _ backOfficeBasePath: Swift.String, completion: @escaping (Swift.Bool) -> ())
  @objc @_Concurrency.MainActor(unsafe) public static func logInfoAdd(code: Swift.String?, message: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public static func callSessionClose(finished: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public static func connectionType() -> EnQualify.ConnectionType
  @objc @_Concurrency.MainActor(unsafe) public static func setTCIDTypeInternational()
  @objc @_Concurrency.MainActor(unsafe) public static func idVerifyStart(_ sender: Any) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public static func videoCallStart(_ sender: Any) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public static func selfServiceStart(_ sender: Any) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public static func startLuminosityAnalyzer()
  @objc @_Concurrency.MainActor(unsafe) public static func invalidateTimerRoomId()
  @objc @_Concurrency.MainActor(unsafe) public static func idFakeCheckStart()
  @objc @_Concurrency.MainActor(unsafe) public static func idFrontStart()
  @objc @_Concurrency.MainActor(unsafe) public static func idBackStart()
  @objc @_Concurrency.MainActor(unsafe) public static func idViewStart(vc: UIKit.UIViewController)
  @objc @_Concurrency.MainActor(unsafe) public static func idDocStore()
  @available(iOS 13.0, *)
  @objc @_Concurrency.MainActor(unsafe) public static func nfcStart() -> Swift.Int
  @available(iOS 13.0, *)
  @objc @_Concurrency.MainActor(unsafe) public static func nfcStart(with documentNo: Swift.String, birthday: Swift.String, expiryDate: Swift.String) -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) public static func nfcViewStart(vc: UIKit.UIViewController)
  @objc @_Concurrency.MainActor(unsafe) public static func nfcStore()
  @objc @_Concurrency.MainActor(unsafe) public static func faceDetectStart()
  @objc @_Concurrency.MainActor(unsafe) public static func idTypeCheckSet()
  @objc @_Concurrency.MainActor(unsafe) public static func onStartSelfService()
  @objc @_Concurrency.MainActor(unsafe) public static func idTypeBackCheckSet()
  @objc @_Concurrency.MainActor(unsafe) public static func faceDetectSet()
  @available(iOS 13.0, *)
  @objc @_Concurrency.MainActor(unsafe) public static func nfcVerifySet()
  @objc @_Concurrency.MainActor(unsafe) public static func chatSet()
  @objc @_Concurrency.MainActor(unsafe) public static func smileDetectStart()
  @objc @_Concurrency.MainActor(unsafe) public static func eyeCloseStart()
  @objc @_Concurrency.MainActor(unsafe) public static func eyeCloseIntervalStart()
  @objc @_Concurrency.MainActor(unsafe) public static func faceUpStart()
  @objc @_Concurrency.MainActor(unsafe) public static func faceLeftStart()
  @objc @_Concurrency.MainActor(unsafe) public static func faceRightStart()
  @objc @_Concurrency.MainActor(unsafe) public static func faceCompleteStart()
  @objc @_Concurrency.MainActor(unsafe) public static func eyeOpenIntervalStart()
  @objc @_Concurrency.MainActor(unsafe) public static func faceViewStart(vc: UIKit.UIViewController)
  @objc @_Concurrency.MainActor(unsafe) public static func faceStore()
  @objc @_Concurrency.MainActor(unsafe) public static func noConnectionAction()
  @objc @_Concurrency.MainActor(unsafe) public static func handleCallFail()
  @objc @_Concurrency.MainActor(unsafe) public static func onRetryFace()
  @available(iOS 13.0, *)
  @objc @_Concurrency.MainActor(unsafe) public static func pauseForNFC()
  @objc @_Concurrency.MainActor(unsafe) public static func pauseForFace()
  @objc @_Concurrency.MainActor(unsafe) public static func videoCallRestart()
  @objc @_Concurrency.MainActor(unsafe) public static func selfServiceRestart()
  @objc @_Concurrency.MainActor(unsafe) public static func onConfirmFace()
  @objc @_Concurrency.MainActor(unsafe) public static func onConfirmFaceWithOutPop()
  @objc @_Concurrency.MainActor(unsafe) public static func onRetryNFC()
  @objc @_Concurrency.MainActor(unsafe) public static func uploadFaceData()
  @objc @_Concurrency.MainActor(unsafe) public static func onConfirmNFC()
  @objc @_Concurrency.MainActor(unsafe) public static func onConfirmNFCWithoutPop()
  @objc @_Concurrency.MainActor(unsafe) public static func idTypeCheckBackStart()
  @objc @_Concurrency.MainActor(unsafe) public static func idTypeCheckFrontStart()
  @objc @_Concurrency.MainActor(unsafe) public static func onRetryDoc()
  @objc @_Concurrency.MainActor(unsafe) public static func onConfirmDoc()
  @objc @_Concurrency.MainActor(unsafe) public static func onConfirmDocWithoutPop()
  @objc @_Concurrency.MainActor(unsafe) public static func startLivenessDetect()
  @objc @_Concurrency.MainActor(unsafe) public static func setSSStartButtons(buttonState: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func idvSettings(domainName: Swift.String?, certificateNames: [Swift.String], aiUsername: Swift.String?, aiPassword: Swift.String?, signalingServer: Swift.String?, stunServer: Swift.String?, turnServer: Swift.String?, turnUsername: Swift.String?, turnPassword: Swift.String?, backOfficeBasePath: Swift.String?, referenceId: Swift.String? = nil, userNameForToken: Swift.String? = nil) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public static func stopSSStartVC(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) public static func setNavigationController(navigator: UIKit.UINavigationController)
  @objc @_Concurrency.MainActor(unsafe) public static func getNavigationController() -> UIKit.UINavigationController?
  @objc @_Concurrency.MainActor(unsafe) public static func setOrientationLock(orientation: UIKit.UIInterfaceOrientationMask)
  @objc @_Concurrency.MainActor(unsafe) public static func setNFCBACData(docNo: Swift.String, birthday: Swift.String, expiryDate: Swift.String) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public static func handleFail()
  @objc @_Concurrency.MainActor(unsafe) public static func idVerifyRestart()
  @objc @_Concurrency.MainActor(unsafe) public static func startVideoChat()
  @objc @_Concurrency.MainActor(unsafe) public static func onExitCall()
  @objc @_Concurrency.MainActor(unsafe) public static func onExitCallWithoutPop()
  @objc @_Concurrency.MainActor(unsafe) public static func onExitSelfService()
  @objc @_Concurrency.MainActor(unsafe) public static func onHangupCall()
  @objc @_Concurrency.MainActor(unsafe) public static func onStartCall()
  @available(iOS 11.0, *)
  @objc @_Concurrency.MainActor(unsafe) public static func startAVRecording()
  @available(iOS 11.0, *)
  @objc @_Concurrency.MainActor(unsafe) public static func stopAVRecording()
  @objc @_Concurrency.MainActor(unsafe) public static func setMessage(message: Swift.String, index: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public static func checkPermissions() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public static func requestVideoAudioPermissions()
  @objc @_Concurrency.MainActor(unsafe) public static func setAgentFullScreen(agentFullScreenState: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func setSpeaker(soundOn: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func setMediaServer(mediaServerState: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func setMSPrivateKey(value: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public static func setTimerForAliveness(timerCountInSeconds: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public static func setLivenessCalibration(value: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public static func setEyeCloseMaxTime(value: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public static func setFaceAngleCalibration(value: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public static func setOCRMode(value: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public static func setOCRCheckSize(value: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public static func setCallWaitTimeout(value: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public static func setIceCheckingTimeout(value: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public static func setICERelay(iceRelayState: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func setSSLPinning(required: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func setEyeCloseCalibration(value: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) public static func setSmilingCalibration(value: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) public static func setICEHost(iceHostState: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func setEyeCloseTolerance(value: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public static func setHashCheck(hashCheck: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func setViewerWidthRatio(local: Swift.Float, remote: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) public static func setViewerLocationRatio(x: Swift.Float, y: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) public static func setScreenRecordAudioEnabled(state: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func setVideoBitrate(rate: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public static func getScreenRecordFilePath() -> Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public static func setShowLogs(value: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func setCertificateBase64(str: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public static func setShowMobileSpeed(state: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func saveRecordAsset(filePath: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public static func setBarcodeReader(state: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func startCardFrontDetect()
  @objc @_Concurrency.MainActor(unsafe) public static func startCardHoloDetect()
  @objc @_Concurrency.MainActor(unsafe) public static func startCardBackDetect()
  @objc @_Concurrency.MainActor(unsafe) public static func idCardDetectSet()
  @objc @_Concurrency.MainActor(unsafe) public static func sendVideoToBackOffice(path: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public static func iconStartButton(_ button: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) public static func iconExitButton(_ button: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) public static func iconRetryButton(_ button: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) public static func iconExitRetryButton(_ button: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) public static func iconHangupRetryButton(_ button: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) public static func iconHangupChatButton(_ button: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) public static func iconCallButton(_ button: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) public static func iconHangupButton(_ button: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) public static func iconRotateButton(_ button: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) public static func iconChatRotateButton(_ button: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) public static func rotateButtonAct()
  @objc @_Concurrency.MainActor(unsafe) public static func toggleFlash(state: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func getAvailableAppointment(startDate: Foundation.Date, endDate: Foundation.Date, callType: Swift.String?, completion: @escaping ((_ data: [EnQualify.EnverifyVerifyAvailableAppointmentResult]?, _ error: (any Swift.Error)?) -> Swift.Void))
  @objc @_Concurrency.MainActor(unsafe) public static func saveAppointment(data: EnQualify.EnverifyVerifyAppointmentSaveMobileModel, completion: @escaping ((_ data: EnQualify.EnverifyVerifySaveMobileAppointmentResult?, _ error: (any Swift.Error)?) -> Swift.Void))
  @objc @_Concurrency.MainActor(unsafe) public static func cancelAppointment(identityType: Swift.String?, identityNo: Swift.String?, callType: Swift.String?, completion: @escaping ((_ data: EnQualify.EnverifyVerifyCancelAppointmentResult?, _ error: (any Swift.Error)?) -> Swift.Void))
  @objc @_Concurrency.MainActor(unsafe) public static func setAgentRequest()
  @objc @_Concurrency.MainActor(unsafe) public static func getAppointment(identityNo: Swift.String?, identityType: Swift.String?, completion: @escaping ((_ data: [EnQualify.EnverifyVerifyAppointmentResult]?, _ error: (any Swift.Error)?) -> Swift.Void))
  @objc @_Concurrency.MainActor(unsafe) public static func getCallTypes(completion: @escaping ((_ data: [EnQualify.EnverifyVerifyCallTypeResult]?, _ error: (any Swift.Error)?) -> Swift.Void))
  @_Concurrency.MainActor(unsafe) public static func getSettings()
  @objc @_Concurrency.MainActor(unsafe) public static func appMovedToForeground()
  @objc @_Concurrency.MainActor(unsafe) public static func appMovedToBackground()
  @objc @_Concurrency.MainActor(unsafe) public static func speedCheck()
  @_Concurrency.MainActor(unsafe) public static func signDocument(data: Foundation.Data)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
extension EnQualify.EnVerify {
  @_Concurrency.MainActor(unsafe) public static func startTimer()
}
@objc public protocol EnVerifyDelegate {
  @objc func luminosityAnalyzed(result: Swift.String)
  @objc func agentRequest(eventData: Swift.String)
  @objc func idVerifyReady()
  @objc func idSelfVerifyReady()
  @objc func callWait()
  @objc func callStart()
  @objc func idTypeCheck()
  @objc func idTypeCheckCompleted()
  @objc func idFakeCheck()
  @objc func idFakeCheckCompleted()
  @objc func idFront()
  @objc func idFrontCompleted()
  @objc func idBack()
  @objc func idBackCompleted()
  @objc func idDocCompleted()
  @objc func nfcVerify()
  @objc func nfcVerifyCompleted()
  @objc func faceDetect()
  @objc func faceDetectCompleted()
  @objc func smileDetect()
  @objc func smileDetectCompleted()
  @objc func eyeClose()
  @objc func eyeCloseDetected()
  @objc func faceUp()
  @objc func faceUpDetected()
  @objc func faceLeft()
  @objc func faceLeftDetected()
  @objc func faceRight()
  @objc func faceRightDetected()
  @objc func eyeCloseInterval()
  @objc func eyeCloseIntervalDetected()
  @objc func eyeOpenInterval()
  @objc func eyeOpenIntervalDetected()
  @objc func hangupLocal()
  @objc func hangupRemote()
  @objc func failure()
  @objc func tokenError()
  @objc func noConnectionError()
  @objc func idFakeDetected()
  @objc func idDocStoreCompleted()
  @objc func nfcStoreCompleted()
  @objc func faceStoreCompleted()
  @objc func idTypeBackCheck()
  @objc func nfcCompleted()
  @objc func faceCompleted()
  @objc func idVerifyExited()
  @objc func timeoutFailure()
  @objc func idCheckFailure()
  @objc func tokenFailure()
  @objc func connectionFailure()
  @objc func nfcFailure()
  @objc func nfcBACDATAFailure()
  @objc func faceLivenessCheckFailure()
  @objc func idRetry()
  @objc func nfcRetry()
  @objc func faceRetry()
  @objc func hostConnected()
  @objc func resolutionChanged()
  @objc func callConnectionFailure()
  @objc func integrationAddCompleted()
  @objc func integrationAddFailure()
  @objc func resultGetCompleted(_ value: EnQualify.EnverifyVerifyCallResult?)
  @objc func resultGetFailure()
  @objc func sessionStartFailure()
  @objc func sessionStartCompleted(sessionUid: Swift.String)
  @objc func getAuthTokenFailure()
  @objc func getAuthTokenCompleted()
  @objc func roomIDSendFailure()
  @objc func roomIDSendCompleted()
  @objc func idDocStoreFailure()
  @objc func addChipStoreFailure()
  @objc func addChipStoreCompleted()
  @objc func addFaceCompleted()
  @objc func addFaceFailure()
  @objc func requestVideoAudioPermissionsResult(_ granted: Swift.Bool)
  @objc func forceHangup()
  @objc func idTextRecognitionTimeout()
  @objc func callSessionCloseResult(status: EnQualify.EnVerifyCallSessionStatusTypeEnum)
  @objc func dismissBeforeAnswered()
  @objc func dismissCallWait()
  @objc func screenRecorderOnStart()
  @objc func screenRecorderOnComplete()
  @objc func screenRecorderOnError(eventData: Swift.String)
  @objc func screenRecorderOnAppend()
  @objc func cardFrontDetectStarted()
  @objc func cardFrontDetected()
  @objc func cardBackDetectStarted()
  @objc func cardBackDetected()
  @objc func cardHoloDetectStarted()
  @objc func cardHoloDetected()
  @objc func videoUploadSuccess()
  @objc func videoUploadFailure()
  @objc func maximumCallTimeExpired()
}
@objc public enum EnVerifyCallSessionStatusTypeEnum : Swift.Int {
  case _none
  case ready
  case started
  case finished
  case closed
  case cancelled
  case failure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class EnVerifyCustomerCard : ObjectiveC.NSObject {
  @objc public static var shared: EnQualify.EnVerifyCustomerCard
  @objc public static var customerCard: IDVerification.CustomerCard
  @objc public func setHoloDetectionType(holoDetectionType: Swift.String)
  @objc public func setDetectionThreshold(threshold: Swift.Float)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class EnverifyScreenRecordingData : ObjectiveC.NSObject {
  @objc public var screenRecordParts: Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class EnVerifyCustomerChip : ObjectiveC.NSObject {
  @objc public static var shared: EnQualify.EnVerifyCustomerChip
  @objc public func getID() -> Swift.String
  @objc public func getIdentityNo() -> Swift.String
  @objc public func getIdentityType() -> Swift.String
  @objc public func getDocumentNo() -> Swift.String
  @objc public func getName() -> Swift.String
  @objc public func getSurname() -> Swift.String
  @objc public func getGender() -> Swift.String
  @objc public func getBirthday() -> Swift.String
  @objc public func getNationality() -> Swift.String
  @objc public func getExpiryDate() -> Swift.String
  @objc public func getFace() -> UIKit.UIImage
  @objc public func getNameOfHolder() -> Swift.String
  @objc public func getSurnameOfHolder() -> Swift.String
  @objc public func getPlaceOfBirth() -> Swift.String
  @objc public func getFullDateOfBirth() -> Swift.String
  @objc public func isChipAuthSucceeded() -> Swift.AnyObject?
  @objc public func isActiveAuthSucceed() -> Swift.AnyObject?
  @objc public func isPassiveAuthSucceeded() -> Swift.AnyObject?
  @objc public func isDataValidated() -> Swift.AnyObject?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class EnVerifyCustomerFace : ObjectiveC.NSObject {
  @objc public static var shared: EnQualify.EnVerifyCustomerFace
  @objc public func getChipConfidence() -> Swift.Int
  @objc public func getIdConfidence() -> Swift.Int
  @objc public func getChipDistance() -> Swift.Float
  @objc public func getIdDistance() -> Swift.Float
  @objc public func getId() -> Swift.String
  @objc public func getFace() -> UIKit.UIImage
  @objc public func getSelfieAntispoofing() -> Swift.Float
  @objc public func isHashSuccess() -> Swift.Bool
  @objc public func getEyeFace() -> UIKit.UIImage
  @objc public func getEyeDistance() -> Swift.Float
  @objc public func getEyeConfidence() -> Swift.Int
  @objc public func getLeftEyeCloseConfidence() -> Swift.Float
  @objc public func getRightEyeCloseConfidence() -> Swift.Float
  @objc public func getSmilingConfidence() -> Swift.Float
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class EnVerifySuccessCustomerIdentityDoc : ObjectiveC.NSObject {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class EnVerifyCustomerIdentityDoc : ObjectiveC.NSObject {
  @objc public static var shared: EnQualify.EnVerifyCustomerIdentityDoc
  @objc public func getOptionalData1() -> Swift.String
  @objc public func getOptionalData2() -> Swift.String
  @objc public func getBarcodeValue() -> Swift.String
  @objc public func getCountry() -> Swift.String
  @objc public func getIdIssuer() -> Swift.String
  @objc public func getIdType() -> Swift.String
  @objc public func getIdentityNo() -> Swift.String
  @objc public func getIdentityType() -> Swift.String
  @objc public func getDocumentNo() -> Swift.String
  @objc public func getName() -> Swift.String
  @objc public func getSurname() -> Swift.String
  @objc public func getGender() -> Swift.String
  @objc public func getBirthday() -> Swift.String
  @objc public func getNationality() -> Swift.String
  @objc public func getExpiryDate() -> Swift.String
  @objc public func getFace() -> UIKit.UIImage
  @objc public func getFrontpage() -> UIKit.UIImage
  @objc public func getBackpage() -> UIKit.UIImage
  @objc public func getHolopage() -> UIKit.UIImage
  @objc override dynamic public init()
  @objc deinit
}
public struct VerifyCallIDBlockGetRequest : Swift.Codable {
  public var identityNumber: Swift.String?
  public var phone: Swift.String?
  public var email: Swift.String?
  public init(identityNumber: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case identityNumber
    case phone
    case email
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MessageSignature : Swift.Codable {
  public var time: Foundation.Date?
  public var nonce: Swift.String?
  public var hash: Swift.String?
  public init(time: Foundation.Date? = nil, nonce: Swift.String? = nil, hash: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case time
    case nonce
    case hash
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallIDDocModel : Swift.Codable {
  public var uId: Foundation.UUID?
  public var sessionUId: Foundation.UUID?
  public var dateTime: Foundation.Date?
  public var frontDocumentUId: Foundation.UUID?
  public var backDocumentUId: Foundation.UUID?
  public var holoDocumentUId: Foundation.UUID?
  public var faceDocumentUId: Foundation.UUID?
  public var frontDocumentGeneralUId: Foundation.UUID?
  public var frontDocumentGenderNationaltiyUId: Foundation.UUID?
  public var frontDocumentHoloFirstUId: Foundation.UUID?
  public var frontDocumentHoloSecondUId: Foundation.UUID?
  public var frontDocumentGuillocheFirstUId: Foundation.UUID?
  public var frontDocumentGuillocheSecondUId: Foundation.UUID?
  public var frontDocumentFlagUId: Foundation.UUID?
  public var frontDocumentSignatureUId: Foundation.UUID?
  public var frontDocumentBioPhotoUId: Foundation.UUID?
  public var frontDocumentGhostImageUId: Foundation.UUID?
  public var backDocumentGeneralUId: Foundation.UUID?
  public var backDocumentAssemblyUId: Foundation.UUID?
  public var backDocumentICAOLogoUId: Foundation.UUID?
  public var backDocumentChipUId: Foundation.UUID?
  public var backDocumentBarcodeUId: Foundation.UUID?
  public var backDocumentGuillocheUId: Foundation.UUID?
  public var frontDocumentGeneralScore: Swift.Double?
  public var frontDocumentGenderNationaltiyScore: Swift.Double?
  public var frontDocumentHoloFirstScore: Swift.Double?
  public var frontDocumentHoloSecondScore: Swift.Double?
  public var frontDocumentGuillocheFirstScore: Swift.Double?
  public var frontDocumentGuillocheSecondScore: Swift.Double?
  public var frontDocumentFlagScore: Swift.Double?
  public var frontDocumentSignatureScore: Swift.Double?
  public var frontDocumentBioPhotoScore: Swift.Double?
  public var frontDocumentGhostImageScore: Swift.Double?
  public var backDocumentGeneralScore: Swift.Double?
  public var backDocumentAssemblyScore: Swift.Double?
  public var backDocumentICAOLogoScore: Swift.Double?
  public var backDocumentChipScore: Swift.Double?
  public var backDocumentBarcodeScore: Swift.Double?
  public var backDocumentGuillocheScore: Swift.Double?
  public var isValid: Swift.Bool?
  public var isValidIdentityNo: Swift.Bool?
  public var isValidNameSurname: Swift.Bool?
  public var isValidGender: Swift.Bool?
  public var isValidBirthDate: Swift.Bool?
  public var isValidDocumentNo: Swift.Bool?
  public var isValidNationality: Swift.Bool?
  public var isValidExpireDate: Swift.Bool?
  public var idIssuer: Swift.String?
  public var externalData1: Swift.String?
  public var externalData2: Swift.String?
  public var barcodeIdentityNo: Swift.String?
  public var isValidBarcodeIdentityNo: Swift.Bool?
  public var frontDocumentContent: Swift.String?
  public var backDocumentContent: Swift.String?
  public var holoDocumentContent: Swift.String?
  public var faceDocumentContent: Swift.String?
  public var frontDocumentGeneralContent: Swift.String?
  public var frontDocumentGenderNationaltiyContent: Swift.String?
  public var frontDocumentHoloFirstContent: Swift.String?
  public var frontDocumentHoloSecondContent: Swift.String?
  public var frontDocumentGuillocheFirstContent: Swift.String?
  public var frontDocumentGuillocheSecondContent: Swift.String?
  public var frontDocumentFlagContent: Swift.String?
  public var frontDocumentSignatureContent: Swift.String?
  public var frontDocumentBioPhotoContent: Swift.String?
  public var frontDocumentGhostImageContent: Swift.String?
  public var backDocumentGeneralContent: Swift.String?
  public var backDocumentAssemblyContent: Swift.String?
  public var backDocumentICAOLogoContent: Swift.String?
  public var backDocumentChipContent: Swift.String?
  public var backDocumentBarcodeContent: Swift.String?
  public var backDocumentGuillocheContent: Swift.String?
  public var frontDocument: EnQualify.VerifyCallDocumentModel?
  public var backDocument: EnQualify.VerifyCallDocumentModel?
  public var holoDocument: EnQualify.VerifyCallDocumentModel?
  public var faceDocument: EnQualify.VerifyCallDocumentModel?
  public var frontDocumentGeneral: EnQualify.VerifyCallDocumentModel?
  public var frontDocumentGenderNationaltiy: EnQualify.VerifyCallDocumentModel?
  public var frontDocumentHoloFirst: EnQualify.VerifyCallDocumentModel?
  public var frontDocumentHoloSecond: EnQualify.VerifyCallDocumentModel?
  public var frontDocumentGuillocheFirst: EnQualify.VerifyCallDocumentModel?
  public var frontDocumentGuillocheSecond: EnQualify.VerifyCallDocumentModel?
  public var frontDocumentFlag: EnQualify.VerifyCallDocumentModel?
  public var frontDocumentSignature: EnQualify.VerifyCallDocumentModel?
  public var frontDocumentBioPhoto: EnQualify.VerifyCallDocumentModel?
  public var frontDocumentGhostImage: EnQualify.VerifyCallDocumentModel?
  public var backDocumentGeneral: EnQualify.VerifyCallDocumentModel?
  public var backDocumentAssembly: EnQualify.VerifyCallDocumentModel?
  public var backDocumentICAOLogo: EnQualify.VerifyCallDocumentModel?
  public var backDocumentChip: EnQualify.VerifyCallDocumentModel?
  public var backDocumentBarcode: EnQualify.VerifyCallDocumentModel?
  public var backDocumentGuilloche: EnQualify.VerifyCallDocumentModel?
  public var modifyDate: Foundation.Date?
  public var identityType: Swift.String?
  public var identityNo: Swift.String?
  public var documentNo: Swift.String?
  public var name: Swift.String?
  public var surname: Swift.String?
  public var gender: Swift.String?
  public var birthDate: Swift.String?
  public var nationality: Swift.String?
  public var issuedBy: Swift.String?
  public var issuedDate: Swift.String?
  public var expireDate: Swift.String?
  public init(uId: Foundation.UUID? = nil, sessionUId: Foundation.UUID? = nil, dateTime: Foundation.Date? = nil, frontDocumentUId: Foundation.UUID? = nil, backDocumentUId: Foundation.UUID? = nil, holoDocumentUId: Foundation.UUID? = nil, faceDocumentUId: Foundation.UUID? = nil, frontDocumentGeneralUId: Foundation.UUID? = nil, frontDocumentGenderNationaltiyUId: Foundation.UUID? = nil, frontDocumentHoloFirstUId: Foundation.UUID? = nil, frontDocumentHoloSecondUId: Foundation.UUID? = nil, frontDocumentGuillocheFirstUId: Foundation.UUID? = nil, frontDocumentGuillocheSecondUId: Foundation.UUID? = nil, frontDocumentFlagUId: Foundation.UUID? = nil, frontDocumentSignatureUId: Foundation.UUID? = nil, frontDocumentBioPhotoUId: Foundation.UUID? = nil, frontDocumentGhostImageUId: Foundation.UUID? = nil, backDocumentGeneralUId: Foundation.UUID? = nil, backDocumentAssemblyUId: Foundation.UUID? = nil, backDocumentICAOLogoUId: Foundation.UUID? = nil, backDocumentChipUId: Foundation.UUID? = nil, backDocumentBarcodeUId: Foundation.UUID? = nil, backDocumentGuillocheUId: Foundation.UUID? = nil, frontDocumentGeneralScore: Swift.Double? = nil, frontDocumentGenderNationaltiyScore: Swift.Double? = nil, frontDocumentHoloFirstScore: Swift.Double? = nil, frontDocumentHoloSecondScore: Swift.Double? = nil, frontDocumentGuillocheFirstScore: Swift.Double? = nil, frontDocumentGuillocheSecondScore: Swift.Double? = nil, frontDocumentFlagScore: Swift.Double? = nil, frontDocumentSignatureScore: Swift.Double? = nil, frontDocumentBioPhotoScore: Swift.Double? = nil, frontDocumentGhostImageScore: Swift.Double? = nil, backDocumentGeneralScore: Swift.Double? = nil, backDocumentAssemblyScore: Swift.Double? = nil, backDocumentICAOLogoScore: Swift.Double? = nil, backDocumentChipScore: Swift.Double? = nil, backDocumentBarcodeScore: Swift.Double? = nil, backDocumentGuillocheScore: Swift.Double? = nil, isValid: Swift.Bool? = nil, isValidIdentityNo: Swift.Bool? = nil, isValidNameSurname: Swift.Bool? = nil, isValidGender: Swift.Bool? = nil, isValidBirthDate: Swift.Bool? = nil, isValidDocumentNo: Swift.Bool? = nil, isValidNationality: Swift.Bool? = nil, isValidExpireDate: Swift.Bool? = nil, idIssuer: Swift.String? = nil, externalData1: Swift.String? = nil, externalData2: Swift.String? = nil, barcodeIdentityNo: Swift.String? = nil, isValidBarcodeIdentityNo: Swift.Bool? = nil, frontDocumentContent: Swift.String? = nil, backDocumentContent: Swift.String? = nil, holoDocumentContent: Swift.String? = nil, faceDocumentContent: Swift.String? = nil, frontDocumentGeneralContent: Swift.String? = nil, frontDocumentGenderNationaltiyContent: Swift.String? = nil, frontDocumentHoloFirstContent: Swift.String? = nil, frontDocumentHoloSecondContent: Swift.String? = nil, frontDocumentGuillocheFirstContent: Swift.String? = nil, frontDocumentGuillocheSecondContent: Swift.String? = nil, frontDocumentFlagContent: Swift.String? = nil, frontDocumentSignatureContent: Swift.String? = nil, frontDocumentBioPhotoContent: Swift.String? = nil, frontDocumentGhostImageContent: Swift.String? = nil, backDocumentGeneralContent: Swift.String? = nil, backDocumentAssemblyContent: Swift.String? = nil, backDocumentICAOLogoContent: Swift.String? = nil, backDocumentChipContent: Swift.String? = nil, backDocumentBarcodeContent: Swift.String? = nil, backDocumentGuillocheContent: Swift.String? = nil, frontDocument: EnQualify.VerifyCallDocumentModel? = nil, backDocument: EnQualify.VerifyCallDocumentModel? = nil, holoDocument: EnQualify.VerifyCallDocumentModel? = nil, faceDocument: EnQualify.VerifyCallDocumentModel? = nil, frontDocumentGeneral: EnQualify.VerifyCallDocumentModel? = nil, frontDocumentGenderNationaltiy: EnQualify.VerifyCallDocumentModel? = nil, frontDocumentHoloFirst: EnQualify.VerifyCallDocumentModel? = nil, frontDocumentHoloSecond: EnQualify.VerifyCallDocumentModel? = nil, frontDocumentGuillocheFirst: EnQualify.VerifyCallDocumentModel? = nil, frontDocumentGuillocheSecond: EnQualify.VerifyCallDocumentModel? = nil, frontDocumentFlag: EnQualify.VerifyCallDocumentModel? = nil, frontDocumentSignature: EnQualify.VerifyCallDocumentModel? = nil, frontDocumentBioPhoto: EnQualify.VerifyCallDocumentModel? = nil, frontDocumentGhostImage: EnQualify.VerifyCallDocumentModel? = nil, backDocumentGeneral: EnQualify.VerifyCallDocumentModel? = nil, backDocumentAssembly: EnQualify.VerifyCallDocumentModel? = nil, backDocumentICAOLogo: EnQualify.VerifyCallDocumentModel? = nil, backDocumentChip: EnQualify.VerifyCallDocumentModel? = nil, backDocumentBarcode: EnQualify.VerifyCallDocumentModel? = nil, backDocumentGuilloche: EnQualify.VerifyCallDocumentModel? = nil, modifyDate: Foundation.Date? = nil, identityType: Swift.String? = nil, identityNo: Swift.String? = nil, documentNo: Swift.String? = nil, name: Swift.String? = nil, surname: Swift.String? = nil, gender: Swift.String? = nil, birthDate: Swift.String? = nil, nationality: Swift.String? = nil, issuedBy: Swift.String? = nil, issuedDate: Swift.String? = nil, expireDate: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case uId
    case sessionUId
    case dateTime
    case frontDocumentUId
    case backDocumentUId
    case holoDocumentUId
    case faceDocumentUId
    case frontDocumentGeneralUId
    case frontDocumentGenderNationaltiyUId
    case frontDocumentHoloFirstUId
    case frontDocumentHoloSecondUId
    case frontDocumentGuillocheFirstUId
    case frontDocumentGuillocheSecondUId
    case frontDocumentFlagUId
    case frontDocumentSignatureUId
    case frontDocumentBioPhotoUId
    case frontDocumentGhostImageUId
    case backDocumentGeneralUId
    case backDocumentAssemblyUId
    case backDocumentICAOLogoUId
    case backDocumentChipUId
    case backDocumentBarcodeUId
    case backDocumentGuillocheUId
    case frontDocumentGeneralScore
    case frontDocumentGenderNationaltiyScore
    case frontDocumentHoloFirstScore
    case frontDocumentHoloSecondScore
    case frontDocumentGuillocheFirstScore
    case frontDocumentGuillocheSecondScore
    case frontDocumentFlagScore
    case frontDocumentSignatureScore
    case frontDocumentBioPhotoScore
    case frontDocumentGhostImageScore
    case backDocumentGeneralScore
    case backDocumentAssemblyScore
    case backDocumentICAOLogoScore
    case backDocumentChipScore
    case backDocumentBarcodeScore
    case backDocumentGuillocheScore
    case isValid
    case isValidIdentityNo
    case isValidNameSurname
    case isValidGender
    case isValidBirthDate
    case isValidDocumentNo
    case isValidNationality
    case isValidExpireDate
    case idIssuer
    case externalData1
    case externalData2
    case barcodeIdentityNo
    case isValidBarcodeIdentityNo
    case frontDocumentContent
    case backDocumentContent
    case holoDocumentContent
    case faceDocumentContent
    case frontDocumentGeneralContent
    case frontDocumentGenderNationaltiyContent
    case frontDocumentHoloFirstContent
    case frontDocumentHoloSecondContent
    case frontDocumentGuillocheFirstContent
    case frontDocumentGuillocheSecondContent
    case frontDocumentFlagContent
    case frontDocumentSignatureContent
    case frontDocumentBioPhotoContent
    case frontDocumentGhostImageContent
    case backDocumentGeneralContent
    case backDocumentAssemblyContent
    case backDocumentICAOLogoContent
    case backDocumentChipContent
    case backDocumentBarcodeContent
    case backDocumentGuillocheContent
    case frontDocument
    case backDocument
    case holoDocument
    case faceDocument
    case frontDocumentGeneral
    case frontDocumentGenderNationaltiy
    case frontDocumentHoloFirst
    case frontDocumentHoloSecond
    case frontDocumentGuillocheFirst
    case frontDocumentGuillocheSecond
    case frontDocumentFlag
    case frontDocumentSignature
    case frontDocumentBioPhoto
    case frontDocumentGhostImage
    case backDocumentGeneral
    case backDocumentAssembly
    case backDocumentICAOLogo
    case backDocumentChip
    case backDocumentBarcode
    case backDocumentGuilloche
    case modifyDate
    case identityType
    case identityNo
    case documentNo
    case name
    case surname
    case gender
    case birthDate
    case nationality
    case issuedBy
    case issuedDate
    case expireDate
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PartiesPartyTypeEnum : Swift.String, Swift.Codable {
  case _none
  case person
  case group
  case foundation
  case corporate
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VerifySignedMessageCallFaceAddRequest : Swift.Codable {
  public var faceDocumentContent: Swift.String?
  public var message: EnQualify.VerifyCallFaceAddRequest?
  public var signature: EnQualify.MessageSignature?
  public init(faceDocumentContent: Swift.String? = nil, message: EnQualify.VerifyCallFaceAddRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case faceDocumentContent
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AgentRequestType {
  case none
  case nfc
  case ocr
  case liveness
  case faceRecognition
  case agent
  case busy
  public static func == (a: EnQualify.AgentRequestType, b: EnQualify.AgentRequestType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VerifyCallIDDocAddRequest : Swift.Codable {
  public var frontDocumentContentHash: Swift.String?
  public var backDocumentContentHash: Swift.String?
  public var holoDocumentContentHash: Swift.String?
  public var faceDocumentContentHash: Swift.String?
  public var frontDocumentGeneralContentHash: Swift.String?
  public var frontDocumentGenderNationaltiyContentHash: Swift.String?
  public var frontDocumentHoloFirstContentHash: Swift.String?
  public var frontDocumentHoloSecondContentHash: Swift.String?
  public var frontDocumentGuillocheFirstContentHash: Swift.String?
  public var frontDocumentGuillocheSecondContentHash: Swift.String?
  public var frontDocumentFlagContentHash: Swift.String?
  public var frontDocumentSignatureContentHash: Swift.String?
  public var frontDocumentBioPhotoContentHash: Swift.String?
  public var frontDocumentGhostImageContentHash: Swift.String?
  public var backDocumentGeneralContentHash: Swift.String?
  public var backDocumentAssemblyContentHash: Swift.String?
  public var backDocumentICAOLogoContentHash: Swift.String?
  public var backDocumentChipContentHash: Swift.String?
  public var backDocumentBarcodeContentHash: Swift.String?
  public var backDocumentGuillocheContentHash: Swift.String?
  public var _id: Swift.Int64?
  public var uId: Foundation.UUID?
  public var code: Swift.String?
  public var data: EnQualify.VerifyCallIDDocModel
  public init(frontDocumentContentHash: Swift.String? = nil, backDocumentContentHash: Swift.String? = nil, holoDocumentContentHash: Swift.String? = nil, faceDocumentContentHash: Swift.String? = nil, frontDocumentGeneralContentHash: Swift.String? = nil, frontDocumentGenderNationaltiyContentHash: Swift.String? = nil, frontDocumentHoloFirstContentHash: Swift.String? = nil, frontDocumentHoloSecondContentHash: Swift.String? = nil, frontDocumentGuillocheFirstContentHash: Swift.String? = nil, frontDocumentGuillocheSecondContentHash: Swift.String? = nil, frontDocumentFlagContentHash: Swift.String? = nil, frontDocumentSignatureContentHash: Swift.String? = nil, frontDocumentBioPhotoContentHash: Swift.String? = nil, frontDocumentGhostImageContentHash: Swift.String? = nil, backDocumentGeneralContentHash: Swift.String? = nil, backDocumentAssemblyContentHash: Swift.String? = nil, backDocumentICAOLogoContentHash: Swift.String? = nil, backDocumentChipContentHash: Swift.String? = nil, backDocumentBarcodeContentHash: Swift.String? = nil, backDocumentGuillocheContentHash: Swift.String? = nil, _id: Swift.Int64? = nil, uId: Foundation.UUID? = nil, code: Swift.String? = nil, data: EnQualify.VerifyCallIDDocModel)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case frontDocumentContentHash
    case backDocumentContentHash
    case holoDocumentContentHash
    case faceDocumentContentHash
    case frontDocumentGeneralContentHash
    case frontDocumentGenderNationaltiyContentHash
    case frontDocumentHoloFirstContentHash
    case frontDocumentHoloSecondContentHash
    case frontDocumentGuillocheFirstContentHash
    case frontDocumentGuillocheSecondContentHash
    case frontDocumentFlagContentHash
    case frontDocumentSignatureContentHash
    case frontDocumentBioPhotoContentHash
    case frontDocumentGhostImageContentHash
    case backDocumentGeneralContentHash
    case backDocumentAssemblyContentHash
    case backDocumentICAOLogoContentHash
    case backDocumentChipContentHash
    case backDocumentBarcodeContentHash
    case backDocumentGuillocheContentHash
    case _id
    case uId
    case code
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias EncodeResult = (data: Foundation.Data?, error: (any Swift.Error)?)
@_hasMissingDesignatedInitializers open class CodableHelper {
  public static var dateformatter: Foundation.DateFormatter?
  open class func decode<T>(_ type: T.Type, from data: Foundation.Data) -> (decodableObj: T?, error: (any Swift.Error)?) where T : Swift.Decodable
  open class func encode<T>(_ value: T, prettyPrint: Swift.Bool = false) -> EnQualify.EncodeResult where T : Swift.Encodable
  @objc deinit
}
public struct VerifyCallDocumentModel : Swift.Codable {
  public var uId: Foundation.UUID?
  public var type: EnQualify.DocumentsDocumentTypeEnum?
  public var subjectType: Swift.String?
  public var category: Swift.String?
  public var notes: Swift.String?
  public var documentUId: Foundation.UUID?
  public var document: EnQualify.DocumentsDocumentModel?
  public init(uId: Foundation.UUID? = nil, type: EnQualify.DocumentsDocumentTypeEnum? = nil, subjectType: Swift.String? = nil, category: Swift.String? = nil, notes: Swift.String? = nil, documentUId: Foundation.UUID? = nil, document: EnQualify.DocumentsDocumentModel? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case uId
    case type
    case subjectType
    case category
    case notes
    case documentUId
    case document
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallIDCheckModel : Swift.Codable {
  public var uId: Foundation.UUID?
  public var sessionUId: Foundation.UUID?
  public var dateTime: Foundation.Date?
  public var response: Swift.String?
  public var fatherName: Swift.String?
  public var motherName: Swift.String?
  public var birthPlace: Swift.String?
  public var registrationPlace: Swift.String?
  public var registrationPlaceFamilyRow: Swift.String?
  public var registrationPlacePersonalRow: Swift.String?
  public var serialNo: Swift.String?
  public var recordNo: Swift.String?
  public var identityType: Swift.String?
  public var identityNo: Swift.String?
  public var documentNo: Swift.String?
  public var name: Swift.String?
  public var surname: Swift.String?
  public var gender: Swift.String?
  public var birthDate: Swift.String?
  public var nationality: Swift.String?
  public var issuedBy: Swift.String?
  public var issuedDate: Swift.String?
  public var expireDate: Swift.String?
  public init(uId: Foundation.UUID? = nil, sessionUId: Foundation.UUID? = nil, dateTime: Foundation.Date? = nil, response: Swift.String? = nil, fatherName: Swift.String? = nil, motherName: Swift.String? = nil, birthPlace: Swift.String? = nil, registrationPlace: Swift.String? = nil, registrationPlaceFamilyRow: Swift.String? = nil, registrationPlacePersonalRow: Swift.String? = nil, serialNo: Swift.String? = nil, recordNo: Swift.String? = nil, identityType: Swift.String? = nil, identityNo: Swift.String? = nil, documentNo: Swift.String? = nil, name: Swift.String? = nil, surname: Swift.String? = nil, gender: Swift.String? = nil, birthDate: Swift.String? = nil, nationality: Swift.String? = nil, issuedBy: Swift.String? = nil, issuedDate: Swift.String? = nil, expireDate: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case uId
    case sessionUId
    case dateTime
    case response
    case fatherName
    case motherName
    case birthPlace
    case registrationPlace
    case registrationPlaceFamilyRow
    case registrationPlacePersonalRow
    case serialNo
    case recordNo
    case identityType
    case identityNo
    case documentNo
    case name
    case surname
    case gender
    case birthDate
    case nationality
    case issuedBy
    case issuedDate
    case expireDate
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallTypeNameModel : Swift.Codable {
  public var code: Swift.String?
  public var name: Swift.String?
  public init(code: Swift.String? = nil, name: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case code
    case name
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PartiesProfileModel : Swift.Codable {
  public var locale: Swift.String?
  public var image: Foundation.UUID?
  public init(locale: Swift.String? = nil, image: Foundation.UUID? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case locale
    case image
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VerifyCallSessionStatusTypeEnum : Swift.String, Swift.Codable {
  case _none
  case ready
  case started
  case finished
  case closed
  case cancelled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VerifyCallIntegrationAddRequest : Swift.Codable {
  public var type: Swift.String
  public var reference: Swift.String
  public var callType: Swift.String?
  public var phone: Swift.String?
  public var email: Swift.String?
  public var formUrl: Swift.String?
  public var iDRegistration: EnQualify.VerifyCallIDRegistrationModel?
  public var addressRegistration: EnQualify.VerifyCallAddressRegistrationModel?
  public var data: Swift.String?
  public init(type: Swift.String, reference: Swift.String, callType: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil, formUrl: Swift.String? = nil, iDRegistration: EnQualify.VerifyCallIDRegistrationModel? = nil, addressRegistration: EnQualify.VerifyCallAddressRegistrationModel? = nil, data: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case type
    case reference
    case callType
    case phone
    case email
    case formUrl
    case iDRegistration
    case addressRegistration
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthAuthenticationInfo : Swift.Codable {
  public var dateTime: Foundation.Date?
  public var success: Swift.Bool?
  public var sessionStatus: Swift.String?
  public init(dateTime: Foundation.Date? = nil, success: Swift.Bool? = nil, sessionStatus: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case dateTime
    case success
    case sessionStatus
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallResultModel : Swift.Codable {
  public var dateTime: Foundation.Date?
  public var userRole: EnQualify.PartiesUserRoleTypeEnum?
  public var result: Swift.String?
  public var _description: Swift.String?
  public var reference: Swift.String?
  public var isCritical: Swift.Bool?
  public var userUId: Foundation.UUID?
  public var name: Swift.String?
  public var createUser: Swift.String?
  public init(dateTime: Foundation.Date? = nil, userRole: EnQualify.PartiesUserRoleTypeEnum? = nil, result: Swift.String? = nil, _description: Swift.String? = nil, reference: Swift.String? = nil, isCritical: Swift.Bool? = nil, userUId: Foundation.UUID? = nil, name: Swift.String? = nil, createUser: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case dateTime
    case userRole
    case result
    case _description
    case reference
    case isCritical
    case userUId
    case name
    case createUser
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PartiesPartyRoleTypeEnum : Swift.String, Swift.Codable {
  case _none
  case user
  case member
  case organization
  case branch
  case staff
  case agent
  case customer
  case representative
  case responsible
  case till
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VerifyCallIDRegistrationModel : Swift.Codable {
  public var fatherName: Swift.String?
  public var motherName: Swift.String?
  public var birthPlace: Swift.String?
  public var registrationPlace: Swift.String?
  public var registrationPlaceFamilyRow: Swift.String?
  public var registrationPlacePersonalRow: Swift.String?
  public var serialNo: Swift.String?
  public var recordNo: Swift.String?
  public var identityType: Swift.String?
  public var identityNo: Swift.String?
  public var documentNo: Swift.String?
  public var name: Swift.String?
  public var surname: Swift.String?
  public var gender: Swift.String?
  public var birthDate: Swift.String?
  public var nationality: Swift.String?
  public var issuedBy: Swift.String?
  public var issuedDate: Swift.String?
  public var expireDate: Swift.String?
  public init(fatherName: Swift.String? = nil, motherName: Swift.String? = nil, birthPlace: Swift.String? = nil, registrationPlace: Swift.String? = nil, registrationPlaceFamilyRow: Swift.String? = nil, registrationPlacePersonalRow: Swift.String? = nil, serialNo: Swift.String? = nil, recordNo: Swift.String? = nil, identityType: Swift.String? = nil, identityNo: Swift.String? = nil, documentNo: Swift.String? = nil, name: Swift.String? = nil, surname: Swift.String? = nil, gender: Swift.String? = nil, birthDate: Swift.String? = nil, nationality: Swift.String? = nil, issuedBy: Swift.String? = nil, issuedDate: Swift.String? = nil, expireDate: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case fatherName
    case motherName
    case birthPlace
    case registrationPlace
    case registrationPlaceFamilyRow
    case registrationPlacePersonalRow
    case serialNo
    case recordNo
    case identityType
    case identityNo
    case documentNo
    case name
    case surname
    case gender
    case birthDate
    case nationality
    case issuedBy
    case issuedDate
    case expireDate
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyAppointmentListMobileResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var data: [EnQualify.VerifyAppointmentMobileModel]?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, data: [EnQualify.VerifyAppointmentMobileModel]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallLogAddResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var status: EnQualify.VerifyCallSessionStatusTypeEnum?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, status: EnQualify.VerifyCallSessionStatusTypeEnum? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case status
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallIDCheckAddRequest : Swift.Codable {
  public var _id: Swift.Int64?
  public var uId: Foundation.UUID?
  public var code: Swift.String?
  public var data: EnQualify.VerifyCallIDCheckModel
  public init(_id: Swift.Int64? = nil, uId: Foundation.UUID? = nil, code: Swift.String? = nil, data: EnQualify.VerifyCallIDCheckModel)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case uId
    case code
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyDocumentSignGetMobileRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PartiesUserRoleTypeEnum : Swift.String, Swift.Codable {
  case _none
  case system
  case app
  case systemAdmin
  case admin
  case regular
  case anonymous
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VerifyCallSessionAddRequest : Swift.Codable {
  public var type: Swift.String
  public var roomId: Swift.String?
  public var videoId: Swift.String?
  public var name: Swift.String?
  public var surname: Swift.String?
  public var phone: Swift.String?
  public var email: Swift.String?
  public var nFCExists: Swift.Bool?
  public var identityType: Swift.String?
  public var identityNo: Swift.String?
  public var reference: Swift.String?
  public var data: Swift.String?
  public var handicapped: Swift.Bool?
  public var canAutoClose: Swift.Bool?
  public var _continue: Swift.Bool?
  public init(type: Swift.String, roomId: Swift.String? = nil, videoId: Swift.String? = nil, name: Swift.String? = nil, surname: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil, nFCExists: Swift.Bool? = nil, identityType: Swift.String? = nil, identityNo: Swift.String? = nil, reference: Swift.String? = nil, data: Swift.String? = nil, handicapped: Swift.Bool? = nil, canAutoClose: Swift.Bool? = nil, _continue: Swift.Bool? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case type
    case roomId
    case videoId
    case name
    case surname
    case phone
    case email
    case nFCExists
    case identityType
    case identityNo
    case reference
    case data
    case handicapped
    case canAutoClose
    case _continue
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallResultResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var data: EnQualify.VerifyCallResultModel?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, data: EnQualify.VerifyCallResultModel? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallSessionRoomRequest : Swift.Codable {
  public var roomId: Swift.String
  public var videoId: Swift.String?
  public init(roomId: Swift.String, videoId: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case roomId
    case videoId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SignedMessageVerifyCallLogAddRequest : Swift.Codable {
  public var message: EnQualify.VerifyCallLogAddRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.VerifyCallLogAddRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyAppointmentAddResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers open class AlamofireRequestBuilder<T> : EnQualify.RequestBuilder<T> {
  required public init(method: Swift.String, URLString: Swift.String, parameters: [Swift.String : Any]?, isBody: Swift.Bool, headers: [Swift.String : Swift.String] = [:], timeout: Swift.Int = 30)
  open func createSessionManager() -> Alamofire.Session
  open func contentTypeForFormPart(fileURL: Foundation.URL) -> Swift.String?
  open func makeRequest(manager: Alamofire.Session, method: Alamofire.HTTPMethod, encoding: any Alamofire.ParameterEncoding, headers: [Swift.String : Swift.String]) -> Alamofire.DataRequest
  override open func execute(_ completion: @escaping (_ response: EnQualify.Response<T>?, _ error: (any Swift.Error)?) -> Swift.Void)
  open func buildHeaders() -> Alamofire.HTTPHeaders
  @objc deinit
}
public enum AlamofireDecodableRequestBuilderError : Swift.Error {
  case emptyDataResponse
  case nilHTTPResponse
  case jsonDecoding(Swift.DecodingError)
  case generalError(any Swift.Error)
}
@_inheritsConvenienceInitializers open class AlamofireDecodableRequestBuilder<T> : EnQualify.AlamofireRequestBuilder<T> where T : Swift.Decodable {
  required public init(method: Swift.String, URLString: Swift.String, parameters: [Swift.String : Any]?, isBody: Swift.Bool, headers: [Swift.String : Swift.String] = super, timeout: Swift.Int = super)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SwaggerClientAPI {
  public static var basePath: Swift.String
  public static var credential: Foundation.URLCredential?
  public static var customHeaders: [Swift.String : Swift.String]
  public static var requestBuilderFactory: any EnQualify.RequestBuilderFactory
  @objc deinit
}
open class RequestBuilder<T> {
  final public let parameters: [Swift.String : Any]?
  final public let isBody: Swift.Bool
  final public let method: Swift.String
  final public let URLString: Swift.String
  final public let timeout: Swift.Int?
  public var onProgressReady: ((Foundation.Progress) -> ())?
  required public init(method: Swift.String, URLString: Swift.String, parameters: [Swift.String : Any]?, isBody: Swift.Bool, headers: [Swift.String : Swift.String] = [:], timeout: Swift.Int = 30)
  open func addHeaders(_ aHeaders: [Swift.String : Swift.String])
  open func execute(_ completion: @escaping (_ response: EnQualify.Response<T>?, _ error: (any Swift.Error)?) -> Swift.Void)
  public func addHeader(name: Swift.String, value: Swift.String) -> Self
  open func addCredential() -> Self
  @objc deinit
}
public protocol RequestBuilderFactory {
  func getNonDecodableBuilder<T>() -> EnQualify.RequestBuilder<T>.Type
  func getBuilder<T>() -> EnQualify.RequestBuilder<T>.Type where T : Swift.Decodable
}
public struct VerifyCallSessionAddResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var sessionUId: Swift.String?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, sessionUId: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case sessionUId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyAvailableAppointmentModel : Swift.Codable {
  public var date: Foundation.Date?
  public var startTime: Swift.String?
  public var endTime: Swift.String?
  public var count: Swift.Int?
  public init(date: Foundation.Date? = nil, startTime: Swift.String? = nil, endTime: Swift.String? = nil, count: Swift.Int? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case date
    case startTime
    case endTime
    case count
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyAppointmentListMobileRequest : Swift.Codable {
  public var identityType: Swift.String?
  public var identityNo: Swift.String?
  public init(identityType: Swift.String? = nil, identityNo: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case identityType
    case identityNo
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifySignedMessageCallIDDocAddRequest : Swift.Codable {
  public var frontDocumentContent: Swift.String?
  public var backDocumentContent: Swift.String?
  public var holoDocumentContent: Swift.String?
  public var faceDocumentContent: Swift.String?
  public var frontDocumentGeneralContent: Swift.String?
  public var frontDocumentGenderNationaltiyContent: Swift.String?
  public var frontDocumentHoloFirstContent: Swift.String?
  public var frontDocumentHoloSecondContent: Swift.String?
  public var frontDocumentGuillocheFirstContent: Swift.String?
  public var frontDocumentGuillocheSecondContent: Swift.String?
  public var frontDocumentFlagContent: Swift.String?
  public var frontDocumentSignatureContent: Swift.String?
  public var frontDocumentBioPhotoContent: Swift.String?
  public var frontDocumentGhostImageContent: Swift.String?
  public var backDocumentGeneralContent: Swift.String?
  public var backDocumentAssemblyContent: Swift.String?
  public var backDocumentICAOLogoContent: Swift.String?
  public var backDocumentChipContent: Swift.String?
  public var backDocumentBarcodeContent: Swift.String?
  public var backDocumentGuillocheContent: Swift.String?
  public var message: EnQualify.VerifyCallIDDocAddRequest?
  public var signature: EnQualify.MessageSignature?
  public init(frontDocumentContent: Swift.String? = nil, backDocumentContent: Swift.String? = nil, holoDocumentContent: Swift.String? = nil, faceDocumentContent: Swift.String? = nil, frontDocumentGeneralContent: Swift.String? = nil, frontDocumentGenderNationaltiyContent: Swift.String? = nil, frontDocumentHoloFirstContent: Swift.String? = nil, frontDocumentHoloSecondContent: Swift.String? = nil, frontDocumentGuillocheFirstContent: Swift.String? = nil, frontDocumentGuillocheSecondContent: Swift.String? = nil, frontDocumentFlagContent: Swift.String? = nil, frontDocumentSignatureContent: Swift.String? = nil, frontDocumentBioPhotoContent: Swift.String? = nil, frontDocumentGhostImageContent: Swift.String? = nil, backDocumentGeneralContent: Swift.String? = nil, backDocumentAssemblyContent: Swift.String? = nil, backDocumentICAOLogoContent: Swift.String? = nil, backDocumentChipContent: Swift.String? = nil, backDocumentBarcodeContent: Swift.String? = nil, backDocumentGuillocheContent: Swift.String? = nil, message: EnQualify.VerifyCallIDDocAddRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case frontDocumentContent
    case backDocumentContent
    case holoDocumentContent
    case faceDocumentContent
    case frontDocumentGeneralContent
    case frontDocumentGenderNationaltiyContent
    case frontDocumentHoloFirstContent
    case frontDocumentHoloSecondContent
    case frontDocumentGuillocheFirstContent
    case frontDocumentGuillocheSecondContent
    case frontDocumentFlagContent
    case frontDocumentSignatureContent
    case frontDocumentBioPhotoContent
    case frontDocumentGhostImageContent
    case backDocumentGeneralContent
    case backDocumentAssemblyContent
    case backDocumentICAOLogoContent
    case backDocumentChipContent
    case backDocumentBarcodeContent
    case backDocumentGuillocheContent
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallVideoMobileAddRequest : Swift.Codable {
  public var fileName: Swift.String?
  public var content: Swift.String?
  public var contentHash: Swift.String?
  public init(fileName: Swift.String? = nil, content: Swift.String? = nil, contentHash: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case fileName
    case content
    case contentHash
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum EntityStateTypeEnum : Swift.String, Swift.Codable {
  case _none
  case active
  case passive
  case removed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SignedMessageVerifyCallSessionRoomRequest : Swift.Codable {
  public var message: EnQualify.VerifyCallSessionRoomRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.VerifyCallSessionRoomRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum IdentityType : Swift.String {
  case PASSPORT
  case IDENTITY
  case C
  case K
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NFCStartResponseType : Swift.Int {
  case success
  case failure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ScreenRecordingPartType : Swift.String {
  case OCR
  case NFC
  case FACE
  case HOLOCHECK
  case VIDEO_CALL
  case LIVENESS_CALL
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AppCurrentStateType : Swift.String {
  case NONE
  case OCR
  case NFC
  case FACE
  case HOLOCHECK
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EnLogLevel : Swift.Int {
  case verbose
  case debug
  case info
  case warning
  case txn
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ConnectionType : Swift.CustomStringConvertible {
  case noConnection, unknown, wifi, cellular2G, cellular3G, cellular4G, cellular5G
  public var description: Swift.String {
    get
  }
  public static func == (a: EnQualify.ConnectionType, b: EnQualify.ConnectionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VerifyCallAddressRegistrationModel : Swift.Codable {
  public var addressType: Swift.String?
  public var district: Swift.String?
  public var districtCode: Swift.Int?
  public var street: Swift.String?
  public var streetCode: Swift.Int?
  public var villageCode: Swift.Int?
  public var addressDetail: Swift.String?
  public var townCode: Swift.Int?
  public var town: Swift.String?
  public var city: Swift.String?
  public var cityCode: Swift.Int?
  public var country: Swift.String?
  public var countryCode: Swift.Int?
  public init(addressType: Swift.String? = nil, district: Swift.String? = nil, districtCode: Swift.Int? = nil, street: Swift.String? = nil, streetCode: Swift.Int? = nil, villageCode: Swift.Int? = nil, addressDetail: Swift.String? = nil, townCode: Swift.Int? = nil, town: Swift.String? = nil, city: Swift.String? = nil, cityCode: Swift.Int? = nil, country: Swift.String? = nil, countryCode: Swift.Int? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case addressType
    case district
    case districtCode
    case street
    case streetCode
    case villageCode
    case addressDetail
    case townCode
    case town
    case city
    case cityCode
    case country
    case countryCode
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONValue : Swift.Codable, Swift.Equatable {
  case string(Swift.String)
  case int(Swift.Int)
  case double(Swift.Double)
  case bool(Swift.Bool)
  case object([Swift.String : EnQualify.JSONValue])
  case array([EnQualify.JSONValue])
  case null
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: EnQualify.JSONValue, b: EnQualify.JSONValue) -> Swift.Bool
}
extension EnQualify.JSONValue : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension EnQualify.JSONValue : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.Int)
  public typealias IntegerLiteralType = Swift.Int
}
extension EnQualify.JSONValue : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.Double)
  public typealias FloatLiteralType = Swift.Double
}
extension EnQualify.JSONValue : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.Bool)
  public typealias BooleanLiteralType = Swift.Bool
}
extension EnQualify.JSONValue : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, EnQualify.JSONValue)...)
  public typealias Key = Swift.String
  public typealias Value = EnQualify.JSONValue
}
extension EnQualify.JSONValue : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: EnQualify.JSONValue...)
  public typealias ArrayLiteralElement = EnQualify.JSONValue
}
public enum DocumentsDocumentTypeEnum : Swift.String, Swift.Codable {
  case _none
  case text
  case binary
  case document
  case image
  case video
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VerifyCallFaceModel : Swift.Codable {
  public var uId: Foundation.UUID?
  public var sessionUId: Foundation.UUID?
  public var dateTime: Foundation.Date?
  public var faceDocumentUId: Foundation.UUID?
  public var distance: Swift.Double?
  public var confidence: Swift.Int?
  public var chipDistance: Swift.Double?
  public var chipConfidence: Swift.Int?
  public var leftEyeCloseConfidence: Swift.Double?
  public var rightEyeCloseConfidence: Swift.Double?
  public var smilingConfidence: Swift.Double?
  public var livenessScore: Swift.Double?
  public var distanceMin: Swift.Double?
  public var distanceMax: Swift.Double?
  public var distanceValidityLevel: Swift.Int?
  public var chipDistanceMin: Swift.Double?
  public var chipDistanceMax: Swift.Double?
  public var chipDistanceValidityLevel: Swift.Int?
  public var livenessScoreValue: Swift.Double?
  public var livenessScoreValidityLevel: Swift.Int?
  public var validityLevel: Swift.Int?
  public var antiSpoofing: Swift.Float?
  public var antiSpoofingValidityLevel: Swift.Int?
  public var antiSpoofingMin: Swift.Double?
  public var antiSpoofingMax: Swift.Double?
  public var faceDocumentContent: Swift.String?
  public var faceDocument: EnQualify.VerifyCallDocumentModel?
  public var modifyDate: Foundation.Date?
  public init(uId: Foundation.UUID? = nil, sessionUId: Foundation.UUID? = nil, dateTime: Foundation.Date? = nil, faceDocumentUId: Foundation.UUID? = nil, distance: Swift.Double? = nil, confidence: Swift.Int? = nil, chipDistance: Swift.Double? = nil, chipConfidence: Swift.Int? = nil, leftEyeCloseConfidence: Swift.Double? = nil, rightEyeCloseConfidence: Swift.Double? = nil, smilingConfidence: Swift.Double? = nil, livenessScore: Swift.Double? = nil, distanceMin: Swift.Double? = nil, distanceMax: Swift.Double? = nil, distanceValidityLevel: Swift.Int? = nil, chipDistanceMin: Swift.Double? = nil, chipDistanceMax: Swift.Double? = nil, chipDistanceValidityLevel: Swift.Int? = nil, livenessScoreValue: Swift.Double? = nil, livenessScoreValidityLevel: Swift.Int? = nil, validityLevel: Swift.Int? = nil, antiSpoofing: Swift.Float? = nil, antiSpoofingValidityLevel: Swift.Int? = nil, antiSpoofingMin: Swift.Double? = nil, antiSpoofingMax: Swift.Double? = nil, faceDocumentContent: Swift.String? = nil, faceDocument: EnQualify.VerifyCallDocumentModel? = nil, modifyDate: Foundation.Date? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case uId
    case sessionUId
    case dateTime
    case faceDocumentUId
    case distance
    case confidence
    case chipDistance
    case chipConfidence
    case leftEyeCloseConfidence
    case rightEyeCloseConfidence
    case smilingConfidence
    case livenessScore
    case distanceMin
    case distanceMax
    case distanceValidityLevel
    case chipDistanceMin
    case chipDistanceMax
    case chipDistanceValidityLevel
    case livenessScoreValue
    case livenessScoreValidityLevel
    case validityLevel
    case antiSpoofing
    case antiSpoofingValidityLevel
    case antiSpoofingMin
    case antiSpoofingMax
    case faceDocumentContent
    case faceDocument
    case modifyDate
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.String {
  public func sha256FromBase64String() -> Swift.String
  public func sha256() -> Swift.String
  public func sha512() -> Swift.String
}
public struct VerifyAppointmentSaveMobileRequest : Swift.Codable {
  public var _id: Swift.Int64?
  public var uId: Foundation.UUID?
  public var code: Swift.String?
  public var data: EnQualify.VerifyAppointmentSaveMobileModel
  public init(_id: Swift.Int64? = nil, uId: Foundation.UUID? = nil, code: Swift.String? = nil, data: EnQualify.VerifyAppointmentSaveMobileModel)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case uId
    case code
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthAuthenticatedUser : Swift.Codable {
  public var userId: Swift.Int64?
  public var userName: Swift.String?
  public var userRole: EnQualify.PartiesUserRoleTypeEnum?
  public var userPartyId: Swift.Int64?
  public var userPartyType: EnQualify.PartiesPartyTypeEnum?
  public var domainId: Swift.Int64?
  public var domainCode: Swift.String?
  public var domainName: Swift.String?
  public var domainType: EnQualify.PartiesPartyRoleTypeEnum?
  public var domainRole: Swift.String?
  public var domainPartyId: Swift.Int64?
  public var domainPartyType: EnQualify.PartiesPartyTypeEnum?
  public var name: Swift.String?
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var profile: EnQualify.PartiesProfileModel?
  public var staffId: Swift.Int64?
  public var staffCode: Swift.String?
  public var history: [EnQualify.AuthAuthenticationInfo]?
  public init(userId: Swift.Int64? = nil, userName: Swift.String? = nil, userRole: EnQualify.PartiesUserRoleTypeEnum? = nil, userPartyId: Swift.Int64? = nil, userPartyType: EnQualify.PartiesPartyTypeEnum? = nil, domainId: Swift.Int64? = nil, domainCode: Swift.String? = nil, domainName: Swift.String? = nil, domainType: EnQualify.PartiesPartyRoleTypeEnum? = nil, domainRole: Swift.String? = nil, domainPartyId: Swift.Int64? = nil, domainPartyType: EnQualify.PartiesPartyTypeEnum? = nil, name: Swift.String? = nil, firstName: Swift.String? = nil, lastName: Swift.String? = nil, profile: EnQualify.PartiesProfileModel? = nil, staffId: Swift.Int64? = nil, staffCode: Swift.String? = nil, history: [EnQualify.AuthAuthenticationInfo]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case userId
    case userName
    case userRole
    case userPartyId
    case userPartyType
    case domainId
    case domainCode
    case domainName
    case domainType
    case domainRole
    case domainPartyId
    case domainPartyType
    case name
    case firstName
    case lastName
    case profile
    case staffId
    case staffCode
    case history
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyAvailableAppointmentListResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var data: [EnQualify.VerifyAvailableAppointmentModel]?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, data: [EnQualify.VerifyAvailableAppointmentModel]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SignedMessageVerifyCallIntegrationAddRequest : Swift.Codable {
  public var message: EnQualify.VerifyCallIntegrationAddRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.VerifyCallIntegrationAddRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SignedMessageVerifyCallSessionCloseRequest : Swift.Codable {
  public var message: EnQualify.VerifyCallSessionCloseRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.VerifyCallSessionCloseRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class AuthAPI {
  open class func apiAuthRevokePost(completion: @escaping ((_ data: EnQualify.AuthRevokeTokenResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiAuthRevokePostWithRequestBuilder() -> EnQualify.RequestBuilder<EnQualify.AuthRevokeTokenResponse>
  open class func apiAuthTokenPost(body: EnQualify.AuthTokenRequest? = nil, completion: @escaping ((_ data: EnQualify.AuthTokenResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiAuthTokenPostWithRequestBuilder(body: EnQualify.AuthTokenRequest? = nil) -> EnQualify.RequestBuilder<EnQualify.AuthTokenResponse>
  @objc deinit
}
public struct VerifyAvailableAppointmentListRequest : Swift.Codable {
  public var callType: Swift.String?
  public var startDate: Foundation.Date?
  public var endDate: Foundation.Date?
  public init(callType: Swift.String? = nil, startDate: Foundation.Date? = nil, endDate: Foundation.Date? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case callType
    case startDate
    case endDate
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallLogAddRequest : Swift.Codable {
  public var sessionUId: Foundation.UUID?
  public var type: EnQualify.VerifyCallLogTypeEnum?
  public var code: Swift.String?
  public var message: Swift.String?
  public var data: Swift.String?
  public init(sessionUId: Foundation.UUID? = nil, type: EnQualify.VerifyCallLogTypeEnum? = nil, code: Swift.String? = nil, message: Swift.String? = nil, data: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case sessionUId
    case type
    case code
    case message
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyMobileParameterGetResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var livenessScore: Swift.Double?
  public var faceRecognitionThreshold: Swift.Double?
  public var timeout: Swift.Int?
  public var maxCallStartErrorTime: Swift.Int?
  public var maxCallStartWaitTime: Swift.Int?
  public var screenRecordBitrate: Swift.Int?
  public var screenRecord: Swift.Bool?
  public var screenRecordPart: Swift.String?
  public var screenRecordRetryCount: Swift.Int?
  public var screenRecordUploadTimeout: Swift.Int?
  public var oCRMode: Swift.String?
  public var oCRDifficultyLevel: Swift.Int?
  public var livenessCalibration: Swift.Int?
  public var eyeDetectionTimeout: Swift.Int?
  public var headCalibration: Swift.Int?
  public var smileCalibration: Swift.Double?
  public var eyeCalibration: Swift.Double?
  public var livenessTimeOut: Swift.Int?
  public var distanceMin: Swift.Double?
  public var distanceMax: Swift.Double?
  public var chipDistanceMin: Swift.Double?
  public var chipDistanceMax: Swift.Double?
  public var maxCallTime: Swift.Int?
  public var setIceCheckingTimeout: Swift.Int?
  public var setCallWaitTimeout: Swift.Int?
  public var showMobileSpeed: Swift.Bool?
  public var getDG1Name: Swift.Bool?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, livenessScore: Swift.Double? = nil, faceRecognitionThreshold: Swift.Double? = nil, timeout: Swift.Int? = nil, maxCallStartErrorTime: Swift.Int? = nil, maxCallStartWaitTime: Swift.Int? = nil, screenRecordBitrate: Swift.Int? = nil, screenRecord: Swift.Bool? = nil, screenRecordPart: Swift.String? = nil, screenRecordRetryCount: Swift.Int? = nil, screenRecordUploadTimeout: Swift.Int? = nil, oCRMode: Swift.String? = nil, oCRDifficultyLevel: Swift.Int? = nil, livenessCalibration: Swift.Int? = nil, eyeDetectionTimeout: Swift.Int? = nil, headCalibration: Swift.Int? = nil, smileCalibration: Swift.Double? = nil, eyeCalibration: Swift.Double? = nil, livenessTimeOut: Swift.Int? = nil, distanceMin: Swift.Double? = nil, distanceMax: Swift.Double? = nil, chipDistanceMin: Swift.Double? = nil, chipDistanceMax: Swift.Double? = nil, maxCallTime: Swift.Int? = nil, setIceCheckingTimeout: Swift.Int? = nil, setCallWaitTimeout: Swift.Int? = nil, showMobileSpeed: Swift.Bool? = nil, getDG1Name: Swift.Bool? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case livenessScore
    case faceRecognitionThreshold
    case timeout
    case maxCallStartErrorTime
    case maxCallStartWaitTime
    case screenRecordBitrate
    case screenRecord
    case screenRecordPart
    case screenRecordRetryCount
    case screenRecordUploadTimeout
    case oCRMode
    case oCRDifficultyLevel
    case livenessCalibration
    case eyeDetectionTimeout
    case headCalibration
    case smileCalibration
    case eyeCalibration
    case livenessTimeOut
    case distanceMin
    case distanceMax
    case chipDistanceMin
    case chipDistanceMax
    case maxCallTime
    case setIceCheckingTimeout
    case setCallWaitTimeout
    case showMobileSpeed
    case getDG1Name
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ResultInfo : Swift.Codable {
  public var code: Swift.String?
  public var type: EnQualify.ResultTypeEnum?
  public var title: Swift.String?
  public var message: Swift.String?
  public var logMessage: Swift.String?
  public var values: [Swift.String : Swift.String]?
  public var info: Swift.String?
  public init(code: Swift.String? = nil, type: EnQualify.ResultTypeEnum? = nil, title: Swift.String? = nil, message: Swift.String? = nil, logMessage: Swift.String? = nil, values: [Swift.String : Swift.String]? = nil, info: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case code
    case type
    case title
    case message
    case logMessage
    case values
    case info
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.String : Swift.CodingKey {
  public var stringValue: Swift.String {
    get
  }
  public init?(stringValue: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public init?(intValue: Swift.Int)
}
extension Swift.KeyedEncodingContainerProtocol {
  public mutating func encodeArray<T>(_ values: [T], forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeArrayIfPresent<T>(_ values: [T]?, forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeMap<T>(_ pairs: [Self.Key : T]) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
  public mutating func encodeMapIfPresent<T>(_ pairs: [Self.Key : T]?) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
}
extension Swift.KeyedDecodingContainerProtocol {
  public func decodeArray<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T] where T : Swift.Decodable
  public func decodeArrayIfPresent<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T]? where T : Swift.Decodable
  public func decodeMap<T>(_ type: T.Type, excludedKeys: Swift.Set<Self.Key>) throws -> [Self.Key : T] where T : Swift.Decodable, Self.Key : Swift.Hashable
}
public struct VerifyDocumentSignGetMobileResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var key: Swift.String?
  public var method: Swift.String?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, key: Swift.String? = nil, method: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case key
    case method
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallSessionCloseRequest : Swift.Codable {
  public var finished: Swift.Bool?
  public init(finished: Swift.Bool? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case finished
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallTypeNameListResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var data: [EnQualify.VerifyCallTypeNameModel]?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, data: [EnQualify.VerifyCallTypeNameModel]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class Configuration {
  public static var dateFormat: Swift.String
  @objc deinit
}
public struct VerifySignedMessageCallIDChipAddRequest : Swift.Codable {
  public var faceDocumentContent: Swift.String?
  public var message: EnQualify.VerifyCallIDChipAddRequest?
  public var signature: EnQualify.MessageSignature?
  public init(faceDocumentContent: Swift.String? = nil, message: EnQualify.VerifyCallIDChipAddRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case faceDocumentContent
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyAppointmentSaveMobileModel : Swift.Codable {
  public var callType: Swift.String?
  public var date: Foundation.Date?
  public var startTime: Swift.String?
  public var identityType: Swift.String?
  public var identityNo: Swift.String?
  public var name: Swift.String?
  public var surname: Swift.String?
  public var phone: Swift.String?
  public var email: Swift.String?
  public init(callType: Swift.String? = nil, date: Foundation.Date? = nil, startTime: Swift.String? = nil, identityType: Swift.String? = nil, identityNo: Swift.String? = nil, name: Swift.String? = nil, surname: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case callType
    case date
    case startTime
    case identityType
    case identityNo
    case name
    case surname
    case phone
    case email
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class JSONEncodingHelper {
  open class func encodingParameters<T>(forEncodableObject encodableObj: T?) -> Alamofire.Parameters? where T : Swift.Encodable
  open class func encodingParameters(forEncodableObject encodableObj: Any?) -> Alamofire.Parameters?
  @objc deinit
}
public struct VerifyDocumentSignSetMobileRequest : Swift.Codable {
  public var data: Swift.String?
  public var signature: Swift.String?
  public init(data: Swift.String? = nil, signature: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case data
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthTokenResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var user: EnQualify.AuthAuthenticatedUser?
  public var token: Swift.String?
  public var expires: Foundation.Date?
  public var validity: Foundation.Date?
  public var validationInfo: EnQualify.AuthAuthenticationValidationInfo?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, user: EnQualify.AuthAuthenticatedUser? = nil, token: Swift.String? = nil, expires: Foundation.Date? = nil, validity: Foundation.Date? = nil, validationInfo: EnQualify.AuthAuthenticationValidationInfo? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case user
    case token
    case expires
    case validity
    case validationInfo
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthClientInfo : Swift.Codable {
  public var version: Swift.String?
  public var device: Swift.String?
  public var platform: Swift.String?
  public var resolution: Swift.String?
  public var language: Swift.String?
  public var dateTime: Swift.String?
  public var tokens: [Swift.String : Swift.String]?
  public init(version: Swift.String? = nil, device: Swift.String? = nil, platform: Swift.String? = nil, resolution: Swift.String? = nil, language: Swift.String? = nil, dateTime: Swift.String? = nil, tokens: [Swift.String : Swift.String]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case version
    case device
    case platform
    case resolution
    case language
    case dateTime
    case tokens
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BaseRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SignedMessageVerifyCallIDBlockGetRequest : Swift.Codable {
  public var message: EnQualify.VerifyCallIDBlockGetRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.VerifyCallIDBlockGetRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SignedMessageBaseRequest : Swift.Codable {
  public var message: EnQualify.BaseRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.BaseRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallIDChipAddRequest : Swift.Codable {
  public var faceDocumentContentHash: Swift.String?
  public var _id: Swift.Int64?
  public var uId: Foundation.UUID?
  public var code: Swift.String?
  public var data: EnQualify.VerifyCallIDChipModel
  public init(faceDocumentContentHash: Swift.String? = nil, _id: Swift.Int64? = nil, uId: Foundation.UUID? = nil, code: Swift.String? = nil, data: EnQualify.VerifyCallIDChipModel)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case faceDocumentContentHash
    case _id
    case uId
    case code
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SignedMessageAuthTokenRequest : Swift.Codable {
  public var message: EnQualify.AuthTokenRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.AuthTokenRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct APIHelper {
  public static func rejectNil(_ source: [Swift.String : Any?]) -> [Swift.String : Any]?
  public static func rejectNilHeaders(_ source: [Swift.String : Any?]) -> [Swift.String : Swift.String]
  public static func convertBoolToString(_ source: [Swift.String : Any]?) -> [Swift.String : Any]?
  public static func mapValuesToQueryItems(_ source: [Swift.String : Any?]) -> [Foundation.URLQueryItem]?
}
public struct VerifyCallIDChipModel : Swift.Codable {
  public var uId: Foundation.UUID?
  public var sessionUId: Foundation.UUID?
  public var dateTime: Foundation.Date?
  public var activeAuthSucceeded: Swift.Bool?
  public var chipAuthSucceeded: Swift.Bool?
  public var passiveAuthSucceeded: Swift.Bool?
  public var publicKey: Swift.String?
  public var isValid: Swift.Bool?
  public var isValidIdentityNo: Swift.Bool?
  public var isValidNameSurname: Swift.Bool?
  public var isValidGender: Swift.Bool?
  public var isValidBirthDate: Swift.Bool?
  public var isValidDocumentNo: Swift.Bool?
  public var isValidNationality: Swift.Bool?
  public var isValidExpireDate: Swift.Bool?
  public var faceDocumentUId: Foundation.UUID?
  public var faceDocumentContent: Swift.String?
  public var faceDocument: EnQualify.VerifyCallDocumentModel?
  public var identityType: Swift.String?
  public var identityNo: Swift.String?
  public var documentNo: Swift.String?
  public var name: Swift.String?
  public var surname: Swift.String?
  public var gender: Swift.String?
  public var birthDate: Swift.String?
  public var nationality: Swift.String?
  public var issuedBy: Swift.String?
  public var issuedDate: Swift.String?
  public var expireDate: Swift.String?
  public init(uId: Foundation.UUID? = nil, sessionUId: Foundation.UUID? = nil, dateTime: Foundation.Date? = nil, activeAuthSucceeded: Swift.Bool? = nil, chipAuthSucceeded: Swift.Bool? = nil, passiveAuthSucceeded: Swift.Bool? = nil, publicKey: Swift.String? = nil, isValid: Swift.Bool? = nil, isValidIdentityNo: Swift.Bool? = nil, isValidNameSurname: Swift.Bool? = nil, isValidGender: Swift.Bool? = nil, isValidBirthDate: Swift.Bool? = nil, isValidDocumentNo: Swift.Bool? = nil, isValidNationality: Swift.Bool? = nil, isValidExpireDate: Swift.Bool? = nil, faceDocumentUId: Foundation.UUID? = nil, faceDocumentContent: Swift.String? = nil, faceDocument: EnQualify.VerifyCallDocumentModel? = nil, identityType: Swift.String? = nil, identityNo: Swift.String? = nil, documentNo: Swift.String? = nil, name: Swift.String? = nil, surname: Swift.String? = nil, gender: Swift.String? = nil, birthDate: Swift.String? = nil, nationality: Swift.String? = nil, issuedBy: Swift.String? = nil, issuedDate: Swift.String? = nil, expireDate: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case uId
    case sessionUId
    case dateTime
    case activeAuthSucceeded
    case chipAuthSucceeded
    case passiveAuthSucceeded
    case publicKey
    case isValid
    case isValidIdentityNo
    case isValidNameSurname
    case isValidGender
    case isValidBirthDate
    case isValidDocumentNo
    case isValidNationality
    case isValidExpireDate
    case faceDocumentUId
    case faceDocumentContent
    case faceDocument
    case identityType
    case identityNo
    case documentNo
    case name
    case surname
    case gender
    case birthDate
    case nationality
    case issuedBy
    case issuedDate
    case expireDate
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct JSONDataEncoding : Alamofire.ParameterEncoding {
  public func encode(_ urlRequest: any Alamofire.URLRequestConvertible, with parameters: Alamofire.Parameters?) throws -> Foundation.URLRequest
  public static func encodingParameters(jsonData: Foundation.Data?) -> Alamofire.Parameters?
}
public struct VerifySignedMessageCallVideoMobileAddRequest : Swift.Codable {
  public var content: Swift.String?
  public var message: EnQualify.VerifyCallVideoMobileAddRequest?
  public var signature: EnQualify.MessageSignature?
  public init(content: Swift.String? = nil, message: EnQualify.VerifyCallVideoMobileAddRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case content
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class StatusAPI {
  open class func apiStatusGetGet(completion: @escaping ((_ data: EnQualify.CoreStatusResponse?, _ error: (any Swift.Error)?) -> Swift.Void))
  open class func apiStatusGetGetWithRequestBuilder() -> EnQualify.RequestBuilder<EnQualify.CoreStatusResponse>
  @objc deinit
}
public struct AuthRevokeTokenResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyAppointmentCancelRequest : Swift.Codable {
  public var callType: Swift.String?
  public var identityType: Swift.String?
  public var identityNo: Swift.String?
  public init(callType: Swift.String? = nil, identityType: Swift.String? = nil, identityNo: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case callType
    case identityType
    case identityNo
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ResultTypeEnum : Swift.String, Swift.Codable {
  case unknown
  case exception
  case fatal
  case error
  case warning
  case success
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SignedMessageVerifyAppointmentCancelRequest : Swift.Codable {
  public var message: EnQualify.VerifyAppointmentCancelRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.VerifyAppointmentCancelRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DocumentsDocumentModel : Swift.Codable {
  public var uId: Foundation.UUID?
  public var name: Swift.String?
  public var type: EnQualify.DocumentsDocumentTypeEnum?
  public var subjectType: Swift.String?
  public var title: Swift.String?
  public var locale: Swift.String?
  public var mime: Swift.String?
  public var state: EnQualify.EntityStateTypeEnum?
  public var contentUId: Foundation.UUID?
  public var content: EnQualify.DocumentsContent?
  public init(uId: Foundation.UUID? = nil, name: Swift.String? = nil, type: EnQualify.DocumentsDocumentTypeEnum? = nil, subjectType: Swift.String? = nil, title: Swift.String? = nil, locale: Swift.String? = nil, mime: Swift.String? = nil, state: EnQualify.EntityStateTypeEnum? = nil, contentUId: Foundation.UUID? = nil, content: EnQualify.DocumentsContent? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case uId
    case name
    case type
    case subjectType
    case title
    case locale
    case mime
    case state
    case contentUId
    case content
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallIntegrationAddResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ErrorResponse : Swift.Error {
  case error(Swift.Int, Foundation.Data?, any Swift.Error)
}
open class Response<T> {
  final public let statusCode: Swift.Int
  final public let header: [Swift.String : Swift.String]
  final public let body: T?
  public init(statusCode: Swift.Int, header: [Swift.String : Swift.String], body: T?)
  convenience public init(response: Foundation.HTTPURLResponse, body: T?)
  @objc deinit
}
public enum DocumentHashType : Swift.String {
  case SHA512
  case SHA256
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VerifyDocumentSignSetMobileResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCallIDCheckAddResponse : Swift.Codable {
  public var isSuccessful: Swift.Bool?
  public var result: EnQualify.ResultInfo?
  public var warning: EnQualify.ResultInfo?
  public var referenceId: Foundation.UUID?
  public var status: EnQualify.VerifyCallSessionStatusTypeEnum?
  public init(isSuccessful: Swift.Bool? = nil, result: EnQualify.ResultInfo? = nil, warning: EnQualify.ResultInfo? = nil, referenceId: Foundation.UUID? = nil, status: EnQualify.VerifyCallSessionStatusTypeEnum? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case isSuccessful
    case result
    case warning
    case referenceId
    case status
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VerifyCallLogTypeEnum : Swift.String, Swift.Codable {
  case _none
  case web
  case mobile
  case integration
  case agent
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SignedMessageCoreSpeedTestDownloadRequest : Swift.Codable {
  public var message: EnQualify.CoreSpeedTestDownloadRequest?
  public var signature: EnQualify.MessageSignature?
  public init(message: EnQualify.CoreSpeedTestDownloadRequest? = nil, signature: EnQualify.MessageSignature? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case message
    case signature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension EnQualify.SignedMessageVerifyAppointmentSaveMobileRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageVerifyAppointmentSaveMobileRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageVerifyAppointmentSaveMobileRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.AuthAuthenticationValidationInfo.CodingKeys : Swift.Equatable {}
extension EnQualify.AuthAuthenticationValidationInfo.CodingKeys : Swift.Hashable {}
extension EnQualify.AuthAuthenticationValidationInfo.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallSessionRoomResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallSessionRoomResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallSessionRoomResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallIDChipAddResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIDChipAddResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIDChipAddResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.SignedMessageVerifyDocumentSignGetMobileRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageVerifyDocumentSignGetMobileRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageVerifyDocumentSignGetMobileRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.SignedMessageVerifyDocumentSignSetMobileRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageVerifyDocumentSignSetMobileRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageVerifyDocumentSignSetMobileRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.PartiesAuthTypeEnum : Swift.Equatable {}
extension EnQualify.PartiesAuthTypeEnum : Swift.Hashable {}
extension EnQualify.PartiesAuthTypeEnum : Swift.RawRepresentable {}
extension EnQualify.SignedMessageVerifyAvailableAppointmentListRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageVerifyAvailableAppointmentListRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageVerifyAvailableAppointmentListRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.DocumentsContent.CodingKeys : Swift.Equatable {}
extension EnQualify.DocumentsContent.CodingKeys : Swift.Hashable {}
extension EnQualify.DocumentsContent.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallFaceAddResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallFaceAddResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallFaceAddResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallFaceAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallFaceAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallFaceAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.SignedMessageVerifyCallIDCheckAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageVerifyCallIDCheckAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageVerifyCallIDCheckAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.EnverifyVerifyAppointmentSaveMobileModel.CodingKeys : Swift.Equatable {}
extension EnQualify.EnverifyVerifyAppointmentSaveMobileModel.CodingKeys : Swift.Hashable {}
extension EnQualify.EnverifyVerifyAppointmentSaveMobileModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.AuthTokenRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.AuthTokenRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.AuthTokenRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.Model : Swift.Equatable {}
extension EnQualify.Model : Swift.Hashable {}
extension EnQualify.Model : Swift.RawRepresentable {}
extension EnQualify.VerifyCallIDDocAddResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIDDocAddResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIDDocAddResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.SignedMessageVerifyAppointmentListMobileRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageVerifyAppointmentListMobileRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageVerifyAppointmentListMobileRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyAppointmentCancelResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyAppointmentCancelResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyAppointmentCancelResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.SignedMessageVerifyCallSessionAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageVerifyCallSessionAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageVerifyCallSessionAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyAppointmentMobileModel.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyAppointmentMobileModel.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyAppointmentMobileModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.CoreSpeedTestDownloadResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.CoreSpeedTestDownloadResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.CoreSpeedTestDownloadResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallSessionCloseResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallSessionCloseResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallSessionCloseResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallIDBlockGetResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIDBlockGetResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIDBlockGetResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.BaseResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.BaseResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.BaseResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.CoreStatusResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.CoreStatusResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.CoreStatusResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.EnVerifyCallSessionStatusTypeEnum : Swift.Equatable {}
extension EnQualify.EnVerifyCallSessionStatusTypeEnum : Swift.Hashable {}
extension EnQualify.EnVerifyCallSessionStatusTypeEnum : Swift.RawRepresentable {}
extension EnQualify.VerifyCallIDBlockGetRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIDBlockGetRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIDBlockGetRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.MessageSignature.CodingKeys : Swift.Equatable {}
extension EnQualify.MessageSignature.CodingKeys : Swift.Hashable {}
extension EnQualify.MessageSignature.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallIDDocModel.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIDDocModel.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIDDocModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.PartiesPartyTypeEnum : Swift.Equatable {}
extension EnQualify.PartiesPartyTypeEnum : Swift.Hashable {}
extension EnQualify.PartiesPartyTypeEnum : Swift.RawRepresentable {}
extension EnQualify.VerifySignedMessageCallFaceAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifySignedMessageCallFaceAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifySignedMessageCallFaceAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.AgentRequestType : Swift.Equatable {}
extension EnQualify.AgentRequestType : Swift.Hashable {}
extension EnQualify.VerifyCallIDDocAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIDDocAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIDDocAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallDocumentModel.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallDocumentModel.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallDocumentModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallIDCheckModel.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIDCheckModel.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIDCheckModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallTypeNameModel.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallTypeNameModel.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallTypeNameModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.PartiesProfileModel.CodingKeys : Swift.Equatable {}
extension EnQualify.PartiesProfileModel.CodingKeys : Swift.Hashable {}
extension EnQualify.PartiesProfileModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallSessionStatusTypeEnum : Swift.Equatable {}
extension EnQualify.VerifyCallSessionStatusTypeEnum : Swift.Hashable {}
extension EnQualify.VerifyCallSessionStatusTypeEnum : Swift.RawRepresentable {}
extension EnQualify.VerifyCallIntegrationAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIntegrationAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIntegrationAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.AuthAuthenticationInfo.CodingKeys : Swift.Equatable {}
extension EnQualify.AuthAuthenticationInfo.CodingKeys : Swift.Hashable {}
extension EnQualify.AuthAuthenticationInfo.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallResultModel.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallResultModel.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallResultModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.PartiesPartyRoleTypeEnum : Swift.Equatable {}
extension EnQualify.PartiesPartyRoleTypeEnum : Swift.Hashable {}
extension EnQualify.PartiesPartyRoleTypeEnum : Swift.RawRepresentable {}
extension EnQualify.VerifyCallIDRegistrationModel.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIDRegistrationModel.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIDRegistrationModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyAppointmentListMobileResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyAppointmentListMobileResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyAppointmentListMobileResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallLogAddResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallLogAddResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallLogAddResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallIDCheckAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIDCheckAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIDCheckAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.PartiesUserRoleTypeEnum : Swift.Equatable {}
extension EnQualify.PartiesUserRoleTypeEnum : Swift.Hashable {}
extension EnQualify.PartiesUserRoleTypeEnum : Swift.RawRepresentable {}
extension EnQualify.VerifyCallSessionAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallSessionAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallSessionAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallResultResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallResultResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallResultResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallSessionRoomRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallSessionRoomRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallSessionRoomRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.SignedMessageVerifyCallLogAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageVerifyCallLogAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageVerifyCallLogAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyAppointmentAddResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyAppointmentAddResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyAppointmentAddResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallSessionAddResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallSessionAddResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallSessionAddResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyAvailableAppointmentModel.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyAvailableAppointmentModel.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyAvailableAppointmentModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyAppointmentListMobileRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyAppointmentListMobileRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyAppointmentListMobileRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifySignedMessageCallIDDocAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifySignedMessageCallIDDocAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifySignedMessageCallIDDocAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallVideoMobileAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallVideoMobileAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallVideoMobileAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.EntityStateTypeEnum : Swift.Equatable {}
extension EnQualify.EntityStateTypeEnum : Swift.Hashable {}
extension EnQualify.EntityStateTypeEnum : Swift.RawRepresentable {}
extension EnQualify.SignedMessageVerifyCallSessionRoomRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageVerifyCallSessionRoomRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageVerifyCallSessionRoomRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.IdentityType : Swift.Equatable {}
extension EnQualify.IdentityType : Swift.Hashable {}
extension EnQualify.IdentityType : Swift.RawRepresentable {}
extension EnQualify.NFCStartResponseType : Swift.Equatable {}
extension EnQualify.NFCStartResponseType : Swift.Hashable {}
extension EnQualify.NFCStartResponseType : Swift.RawRepresentable {}
extension EnQualify.ScreenRecordingPartType : Swift.Equatable {}
extension EnQualify.ScreenRecordingPartType : Swift.Hashable {}
extension EnQualify.ScreenRecordingPartType : Swift.RawRepresentable {}
extension EnQualify.AppCurrentStateType : Swift.Equatable {}
extension EnQualify.AppCurrentStateType : Swift.Hashable {}
extension EnQualify.AppCurrentStateType : Swift.RawRepresentable {}
extension EnQualify.EnLogLevel : Swift.Equatable {}
extension EnQualify.EnLogLevel : Swift.Hashable {}
extension EnQualify.EnLogLevel : Swift.RawRepresentable {}
extension EnQualify.ConnectionType : Swift.Equatable {}
extension EnQualify.ConnectionType : Swift.Hashable {}
extension EnQualify.VerifyCallAddressRegistrationModel.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallAddressRegistrationModel.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallAddressRegistrationModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.DocumentsDocumentTypeEnum : Swift.Equatable {}
extension EnQualify.DocumentsDocumentTypeEnum : Swift.Hashable {}
extension EnQualify.DocumentsDocumentTypeEnum : Swift.RawRepresentable {}
extension EnQualify.VerifyCallFaceModel.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallFaceModel.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallFaceModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyAppointmentSaveMobileRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyAppointmentSaveMobileRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyAppointmentSaveMobileRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.AuthAuthenticatedUser.CodingKeys : Swift.Equatable {}
extension EnQualify.AuthAuthenticatedUser.CodingKeys : Swift.Hashable {}
extension EnQualify.AuthAuthenticatedUser.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyAvailableAppointmentListResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyAvailableAppointmentListResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyAvailableAppointmentListResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.SignedMessageVerifyCallIntegrationAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageVerifyCallIntegrationAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageVerifyCallIntegrationAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.SignedMessageVerifyCallSessionCloseRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageVerifyCallSessionCloseRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageVerifyCallSessionCloseRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyAvailableAppointmentListRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyAvailableAppointmentListRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyAvailableAppointmentListRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallLogAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallLogAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallLogAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyMobileParameterGetResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyMobileParameterGetResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyMobileParameterGetResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.ResultInfo.CodingKeys : Swift.Equatable {}
extension EnQualify.ResultInfo.CodingKeys : Swift.Hashable {}
extension EnQualify.ResultInfo.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyDocumentSignGetMobileResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyDocumentSignGetMobileResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyDocumentSignGetMobileResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallSessionCloseRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallSessionCloseRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallSessionCloseRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallTypeNameListResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallTypeNameListResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallTypeNameListResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifySignedMessageCallIDChipAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifySignedMessageCallIDChipAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifySignedMessageCallIDChipAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyAppointmentSaveMobileModel.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyAppointmentSaveMobileModel.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyAppointmentSaveMobileModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyDocumentSignSetMobileRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyDocumentSignSetMobileRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyDocumentSignSetMobileRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.AuthTokenResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.AuthTokenResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.AuthTokenResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.AuthClientInfo.CodingKeys : Swift.Equatable {}
extension EnQualify.AuthClientInfo.CodingKeys : Swift.Hashable {}
extension EnQualify.AuthClientInfo.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.SignedMessageVerifyCallIDBlockGetRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageVerifyCallIDBlockGetRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageVerifyCallIDBlockGetRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.SignedMessageBaseRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageBaseRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageBaseRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallIDChipAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIDChipAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIDChipAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.SignedMessageAuthTokenRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageAuthTokenRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageAuthTokenRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallIDChipModel.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIDChipModel.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIDChipModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifySignedMessageCallVideoMobileAddRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifySignedMessageCallVideoMobileAddRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifySignedMessageCallVideoMobileAddRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.AuthRevokeTokenResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.AuthRevokeTokenResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.AuthRevokeTokenResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyAppointmentCancelRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyAppointmentCancelRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyAppointmentCancelRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.ResultTypeEnum : Swift.Equatable {}
extension EnQualify.ResultTypeEnum : Swift.Hashable {}
extension EnQualify.ResultTypeEnum : Swift.RawRepresentable {}
extension EnQualify.SignedMessageVerifyAppointmentCancelRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageVerifyAppointmentCancelRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageVerifyAppointmentCancelRequest.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.DocumentsDocumentModel.CodingKeys : Swift.Equatable {}
extension EnQualify.DocumentsDocumentModel.CodingKeys : Swift.Hashable {}
extension EnQualify.DocumentsDocumentModel.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallIntegrationAddResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIntegrationAddResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIntegrationAddResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.DocumentHashType : Swift.Equatable {}
extension EnQualify.DocumentHashType : Swift.Hashable {}
extension EnQualify.DocumentHashType : Swift.RawRepresentable {}
extension EnQualify.VerifyDocumentSignSetMobileResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyDocumentSignSetMobileResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyDocumentSignSetMobileResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallIDCheckAddResponse.CodingKeys : Swift.Equatable {}
extension EnQualify.VerifyCallIDCheckAddResponse.CodingKeys : Swift.Hashable {}
extension EnQualify.VerifyCallIDCheckAddResponse.CodingKeys : Swift.RawRepresentable {}
extension EnQualify.VerifyCallLogTypeEnum : Swift.Equatable {}
extension EnQualify.VerifyCallLogTypeEnum : Swift.Hashable {}
extension EnQualify.VerifyCallLogTypeEnum : Swift.RawRepresentable {}
extension EnQualify.SignedMessageCoreSpeedTestDownloadRequest.CodingKeys : Swift.Equatable {}
extension EnQualify.SignedMessageCoreSpeedTestDownloadRequest.CodingKeys : Swift.Hashable {}
extension EnQualify.SignedMessageCoreSpeedTestDownloadRequest.CodingKeys : Swift.RawRepresentable {}
